[{"path":"https://shmercer.github.io/writeAlizer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Sterett H. Mercer Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"writeAlizer: Getting Started","text":"writeAlizer package downloads predictive models writing quality written-expression CBM scores applies models data. details model development can found writeAlizer wiki.","code":""},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"prerequisites","dir":"Articles","previous_headings":"Background","what":"Prerequisites","title":"writeAlizer: Getting Started","text":"writeAlizer accepts following output files inputs: ReaderBench: writeAlizer supports output files (.csv format) generated Java version ReaderBench. Source Code Windows Binaries Coh-Metrix: writeAlizer supports output files Coh-Metrix version 3.0 (.csv format). Request Copy Coh-Metrix GAMET: writeAlizer supports output files GAMET version 1.0 (.csv format). Download Windows Mac writeAlizer scoring models assume column names output files unchanged (exactly generated program). programs list file paths first column, writeAlizer file import functions parse file names file paths store file names identification variable (ID). import_rb() (ReaderBench) import_coh() (Coh-Metrix) keep IDs character. ReaderBench CSVs, original File.name column renamed ID stored character. Numeric IDs fine , coerced numeric avoid losing leading zeros formatting.","code":""},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"file-setup","dir":"Articles","previous_headings":"Background","what":"File Setup","title":"writeAlizer: Getting Started","text":"ReaderBench, Coh-Metrix, GAMET accept folder text files (.txt) inputs, filenames read ID variables writing samples.","code":""},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"file-format-and-windows-specific-encodings","dir":"Articles","previous_headings":"Background > File Setup","what":"File Format and Windows-Specific Encodings","title":"writeAlizer: Getting Started","text":"avoid encoding issues R programs, always save text files UTF-8. Text files created Windows systems may sometimes use legacy encodings Windows-1252 (also known CP1252) rather UTF-8. encodings include typographic punctuation symbols part standard ASCII can cause problems read macOS Linux systems, R functions assume UTF-8 input. Typical problematic characters include: Programs expecting UTF-8 may display characters incorrectly (“garbled” symbols) fail read file entirely.","code":""},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"detecting-file-encoding","dir":"Articles","previous_headings":"Background > File Setup","what":"Detecting File Encoding","title":"writeAlizer: Getting Started","text":"can use readr package guess encoding text file:","code":"library(readr)  # Detect the likely encoding of a text file guess_encoding(\"example.txt\")  # A tibble: 2 × 2   encoding   confidence   <chr>           <dbl> 1 UTF-8            0.95 2 windows-1252     0.05"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"converting-to-utf-8","dir":"Articles","previous_headings":"Background > File Setup","what":"Converting to UTF-8","title":"writeAlizer: Getting Started","text":"file uses Windows-1252 another legacy encoding, can convert safely UTF-8: Alternatively, can use iconv() directly:","code":"# Read and re-encode a text file txt <- readLines(\"example.txt\", encoding = \"Windows-1252\") writeLines(txt, \"example_utf8.txt\", useBytes = TRUE) txt <- readLines(\"example.txt\") txt_utf8 <- iconv(txt, from = \"Windows-1252\", to = \"UTF-8\") writeLines(txt_utf8, \"example_utf8.txt\", useBytes = TRUE)"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"processing-files-in-readerbench","dir":"Articles","previous_headings":"Background","what":"Processing Files in ReaderBench","title":"writeAlizer: Getting Started","text":"Download Windows binary build source ReaderBench requires Java run. Java SE Runtime Environment can downloaded . Java installed Java path must set Windows. check Java path set, open Command Prompt (cmd.exe), run following command: see output similar : Java version returned, follow instructions setting Java Path. Unzip open ReaderBench folder. Click ‘run.bat’. screen similar one appear. appears briefly closes, double check Java path specified correctly. Click Textual Complexity -> Run Textual Complexity Indices Specify path folder containing writing sample .txt files. output .csv appear folder processing complete.","code":"java -version java version \"1.8.0_451\" Java(TM) SE Runtime Environment (build 1.8.0_451-b10) Java HotSpot(TM) 64-Bit Server VM (build 25.451-b10, mixed mode)"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"java-path","dir":"Articles","previous_headings":"Background > Processing Files in ReaderBench","what":"Setting the Java Path in Windows","title":"writeAlizer: Getting Started","text":"Open File Explorer navigate (directory Java installed ): Inside, locate Java folder — example: Copy full path. ’ll need next step. Set JAVA_HOME (via Windows Settings) Press Windows + R, type sysdm.cpl, press Enter. Go Advanced tab → click Environment Variables. System variables, click New… – Variable name: JAVA_HOME – Variable value: paste Java path (e.g., C:\\Program Files\\Java\\jre1.8.0_451) Click OK save. Add Java system Path Environment Variables window, find select variable named Path, click Edit. Click New, add following entry: %JAVA_HOME% Command Prompt, check Java version command:","code":"C:\\Program Files\\Java\\ C:\\Program Files\\Java\\jre1.8.0_451 java -version"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"installing-writealizer","dir":"Articles","previous_headings":"","what":"Installing writeAlizer","title":"writeAlizer: Getting Started","text":"writeAlizer available CRAN. install development version writeAlizer:","code":"install.packages(\"writeAlizer\")  library(writeAlizer) # From GitHub  #using the pak package #install.packages(\"pak\") pak::pak(\"shmercer/writeAlizer\")  #or using devtools #install.packages(\"devtools\") devtools::install_github(\"shmercer/writeAlizer\")  library(writeAlizer)"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"optional-model-dependencies","dir":"Articles","previous_headings":"Installing writeAlizer","what":"Optional model dependencies","title":"writeAlizer: Getting Started","text":"model families require packages listed Suggests. Discover need locally:","code":"md <- writeAlizer::model_deps() md$required   # packages already available md$missing    # packages you may want to install for full functionality"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"writeAlizer: Getting Started","text":"minimal example shows import small sample dataset ships package (optionally) run model available locally.","code":"# Load a small ReaderBench sample shipped with the package rb_path <- system.file(\"extdata\", \"sample_rb.csv\", package = \"writeAlizer\") rb <- import_rb(rb_path) head(rb)  # Example: run a ReaderBench predictive model (model artifacts will be downloaded on the first run) quality <- predict_quality(\"rb_mod3all\", rb) head(quality)"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing data","title":"writeAlizer: Getting Started","text":"examples : code snippet loads small example CSV ships package using system.file(...). Replace files running analyses data. writeAlizer expects tidy CSV outputs common text analysis tools. Use matching import helper format: three imports return data.frame ID column; predict_quality() relies ID keep rows aligned outputs.","code":"# ReaderBench CSV   rb_path  <- system.file(\"extdata\", \"sample_rb.csv\",    package = \"writeAlizer\") rb  <- import_rb(rb_path)  # Coh‑Metrix CSV    coh_path <- system.file(\"extdata\", \"sample_coh.csv\",   package = \"writeAlizer\") coh <- import_coh(coh_path)  # GAMET CSV         gam_path <- system.file(\"extdata\", \"sample_gamet.csv\", package = \"writeAlizer\") gam <- import_gamet(gam_path)  # Peek at structure str(rb) str(coh) str(gam)"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"predicting-writing-quality","dir":"Articles","previous_headings":"","what":"Predicting writing quality","title":"writeAlizer: Getting Started","text":"Use predict_quality(model, data) run one built‑model families: ReaderBench: rb_mod1, rb_mod2, rb_mod3narr, rb_mod3exp, rb_mod3per, rb_mod3all Coh‑Metrix: coh_mod1, coh_mod2, coh_mod3narr, coh_mod3exp, coh_mod3per, coh_mod3all GAMET (CWS/CIWS): gamet_cws1 Offline demo: example","code":""},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"examples","dir":"Articles","previous_headings":"Predicting writing quality","what":"Examples","title":"writeAlizer: Getting Started","text":"Return value. data.frame ID plus one column per sub‑model prediction (prefixed pred_). multiple numeric prediction columns (model isn’t gamet_cws1), row‑wise mean column (e.g., score_mean) added summarize overall quality.","code":"# ReaderBench -> holistic quality rb_quality <- predict_quality(\"rb_mod3all\", rb) head(rb_quality)  # Coh‑Metrix -> holistic quality coh_quality <- predict_quality(\"coh_mod3all\", coh) head(coh_quality)  # GAMET -> CWS and CIWS (two prediction columns) gamet_scores <- predict_quality(\"gamet_cws1\", gam) head(gamet_scores)"},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"model-keys-at-a-glance-with-references","dir":"Articles","previous_headings":"","what":"Model keys at a glance (with references)","title":"writeAlizer: Getting Started","text":"Use table pick model keep track published uses. Fill References column citations (e.g., “Smith & Lee, 2022; doi:…”) go.","code":""},{"path":"https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html","id":"working-with-the-model-download-cache","dir":"Articles","previous_headings":"","what":"Working with the model download cache","title":"writeAlizer: Getting Started","text":"package downloads caches model artifacts first time use model.","code":"# See where model artifacts are cached writeAlizer::wa_cache_dir()  # Clear cache if needed  writeAlizer::wa_cache_clear()"},{"path":"https://shmercer.github.io/writeAlizer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sterett H. Mercer. Author, maintainer.","code":""},{"path":"https://shmercer.github.io/writeAlizer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mercer, S. H. (2025). writeAlizer: Generate predicted writing quality scores (Version 0.0.0) [R package; Computer software]. Comprehensive R Archive Network. https://doi.org/10.32614/CRAN.package.writeAlizer","code":"@Manual{,   title = {writeAlizer: Generate predicted writing quality scores},   author = {Sterett H. Mercer},   year = {2025},   note = {R package version 0.0.0},   doi = {10.32614/CRAN.package.writeAlizer},   url = {https://doi.org/10.32614/CRAN.package.writeAlizer},   organization = {Comprehensive R Archive Network}, }"},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"writealizer-an-r-package-to-generate-automated-writing-quality-scores","dir":"","previous_headings":"","what":"Generate Predicted Writing Quality Scores","title":"Generate Predicted Writing Quality Scores","text":"repository hosts code R package apply research-based writing scoring models (see references ). addition, repository hosts documentation electronic supplement published research articles repository wiki. writeAlizer R package () imports ReaderBench, Coh-Metrix, GAMET output files R, (b) downloads existing predictive scoring models local machine, (c) uses predictive scoring models generate predicted writing quality scores Correct Word Sequences Correct Minus Incorrect Word Sequences scores ReaderBench, Coh-Metrix, /GAMET files.","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"versions","dir":"","previous_headings":"","what":"Versions","title":"Generate Predicted Writing Quality Scores","text":"version history writeAlizer available package NEWS.md file.","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Generate Predicted Writing Quality Scores","text":"step‑‑step walkthrough installing using writeAlizer, see online tutorial: https://shmercer.github.io/writeAlizer/articles/writealizer-getting-started.html Documentation writeAlizer functions can found : https://shmercer.github.io/writeAlizer/reference/index.html","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"prerequisites","dir":"","previous_headings":"Getting Started","what":"Prerequisites","title":"Generate Predicted Writing Quality Scores","text":"writeAlizer accepts following output files inputs: 1. ReaderBench: writeAlizer supports output files (.csv format) generated Java version ReaderBench. Source Code Windows Binaries 2. Coh-Metrix: writeAlizer supports output files Coh-Metrix version 3.0 (.csv format). 3. GAMET: writeAlizer supports output files GAMET version 1.0 (.csv format). writeAlizer scoring models assume column names output files unchanged (exactly generated program). programs list file paths first column, writeAlizer file import functions parse file names file paths store file names identification variable (ID). import_rb() (ReaderBench) import_coh() (Coh-Metrix) keep IDs character. ReaderBench CSVs, original File.name column renamed ID stored character. Numeric IDs fine , coerced numeric avoid losing leading zeros formatting.","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"installing","dir":"","previous_headings":"Getting Started","what":"Installing","title":"Generate Predicted Writing Quality Scores","text":"","code":"# To install from CRAN: install.packages(\"writeAlizer\")  # for documentation of the file import and predict_quality() functions help(\"writeAlizer\")"},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"development-version","dir":"","previous_headings":"Getting Started","what":"Development version","title":"Generate Predicted Writing Quality Scores","text":"","code":"# To install from GitHub  #using the pak package #install.packages(\"pak\") pak::pak(\"shmercer/writeAlizer\")  #or using devtools #install.packages(\"devtools\") devtools::install_github(\"shmercer/writeAlizer\")"},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"install-model-dependencies-suggests","dir":"","previous_headings":"Getting Started","what":"Install model dependencies (Suggests)","title":"Generate Predicted Writing Quality Scores","text":"models rely packages listed Suggests. use model_deps() discover ’s needed machine run models locally. model_deps() also prints helpful message. anything missing, includes copy-paste command like:","code":"# Discover optional model packages from writeAlizer's Suggests md <- writeAlizer::model_deps()  md$required md$missing Missing required packages: glmnet, ranger Install them manually, e.g.:   install.packages(c(\"glmnet\", \"ranger\"))"},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"quickstart-generate-predicted-quality-scores-with-the-rb_mod3all--coh_mod3all-models","dir":"","previous_headings":"Getting Started","what":"Quickstart: generate predicted quality scores with the rb_mod3all / coh_mod3all models","title":"Generate Predicted Writing Quality Scores","text":"","code":"library(writeAlizer)  ## ReaderBench example rb_path <- system.file(\"extdata\", \"sample_rb.csv\", package = \"writeAlizer\") #read path of included sample rb output file rb <- import_rb(rb_path) #import the rb file rb_pred <- predict_quality(model = \"rb_mod3all\", rb) #generate predicted values  ## Coh-Metrix example  coh_path <- system.file(\"extdata\", \"sample_coh.csv\", package = \"writeAlizer\") #read path of included sample Cooh-Metrix output file coh <- import_coh(coh_path) #import the file coh_pred <- predict_quality(model = \"coh_mod3all\", coh) #generate predicted values"},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"about-predict_quality-output","dir":"","previous_headings":"Getting Started","what":"About predict_quality() output","title":"Generate Predicted Writing Quality Scores","text":"models ensembles output multiple sub-predictions (e.g., genre-specific component models). cases, predict_quality() adds column named pred_model_mean, mean model’s sub-predictions. single-output models, ’ll just see pred_model column.","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"where-model-files-are-stored","dir":"","previous_headings":"Getting Started","what":"Where model files are stored","title":"Generate Predicted Writing Quality Scores","text":"default, writeAlizer caches downloaded model artifacts user cache directory. wa_cache_dir() → returns path package cache directory (character scalar). wa_cache_clear(ask = TRUE) → clears cached files. ask = TRUE (default), prompts deleting; set ask = FALSE clear without prompt. Returns (invisibly) TRUE cache cleared, FALSE otherwise.","code":"# return the cache directory location wa_cache_dir()  # list objects in the cache, with option to clear it wa_cache_clear()"},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Generate Predicted Writing Quality Scores","text":"Information various scoring models available developed repository’s wiki: Description general process used develop scoring algorithms. Coh-Metrix Model 1 Coh-Metrix Model 2 Coh-Metrix Model 3* ReaderBench Model 1 ReaderBench Model 2 ReaderBench Model 3* Automated Written Expression CBM Model 1","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"package-author-and-maintainer","dir":"","previous_headings":"","what":"Package Author and Maintainer","title":"Generate Predicted Writing Quality Scores","text":"Sterett H. Mercer - University British Columbia UBC Faculty Profile: https://ecps.educ.ubc.ca/sterett-h-mercer/ ResearchGate: https://www.researchgate.net/profile/Sterett_Mercer Google Scholar: https://scholar.google.ca/citations?user=YJg4svsAAAAJ&hl=en Also see list code contributors package.","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"journal-articles","dir":"","previous_headings":"References","what":"Journal Articles","title":"Generate Predicted Writing Quality Scores","text":"Matta, M., Keller-Margulis, M. ., & Mercer, S. H. (press). Improving written-expression curriculum-based measurement feasibility automated text evaluation programs. School Psychology. https://doi.org/10.1037/spq0000691 Matta, M., Mercer, S. H., & Keller-Margulis, M. . (2023). Implications bias automated writing quality scores fair equitable assessment decisions. School Psychology, 38, 173–181. https://doi.org/10.1037/spq0000517 Matta, M., Mercer, S. H., & Keller-Margulis, M. . (2022). Evaluating validity bias hand-calculated automated written expression curriculum-based measurement scores. Assessment Education: Principles, Policy & Practice, 29, 200-218. https://doi.org/10.1080/0969594X.2022.2043240 Mercer, S. H., & Cannon, J. E. (2022). Validity automated learning progress assessment English written expression students learning difficulties. Journal Educational Research Online, 14, 39-60. https://doi.org/10.31244/jero.2022.01.03 Matta, M., Keller-Margulis, M. ., & Mercer, S. H. (2022). Cost analysis cost effectiveness hand-scored automated approaches writing screening. Journal School Psychology, 92, 80-95. https://doi.org/10.1016/j.jsp.2022.03.003 Keller-Margulis, M. ., Mercer, S. H., & Matta, M. (2021). Validity automated text evaluation tools written-expression curriculum-based measurement: comparison study. Reading Writing: Interdisciplinary Journal, 34, 2461-2480. https://doi.org/10.1007/s11145-021-10153-6 Mercer, S. H., Cannon, J. E., Squires, B., Guo, Y., & Pinco, E. (2021). Accuracy automated written expression curriculum-based measurement scoring. Canadian Journal School Psychology, 36, 304-317. https://doi.org/10.1177/0829573520987753 Mercer, S. H., Keller-Margulis, M. ., Faith, E. L., Reid, E. K., & Ochs, S. (2019). potential automated text evaluation improve technical adequacy written expression curriculum-based measurement. Learning Disability Quarterly, 42, 117-128. https://doi.org/10.1177/0731948718803296","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"conference-presentations","dir":"","previous_headings":"References","what":"Conference Presentations","title":"Generate Predicted Writing Quality Scores","text":"Keller-Margulis, M. ., Mercer, S. H., Matta, M., Hut, . R., Navarro, S., & Duran, B. J. (2025, February). Cross-genre validity automated scoring writing CBM. Poster presented meeting National Association School Psychologists, Seattle, WA, USA. Keller-Margulis, M., Mercer, S. H., Matta, M., Duran, B., Hut, ., Jellinek-Russo, E., & Lozano, . (2024, February). Updated validity automated scoring writing CBM across genres. Paper presented meeting National Association School Psychologists, New Orleans, LA, USA. Keller-Margulis, M. ., Mercer, S. H., Matta, M., Duran, B. J., Hut, . R., Jellinek, E. R., Loria, E. S., & Lozano, . (2023, February). Validity automated scoring written expression CBM across genres. Paper presented meeting National Association School Psychologists, Denver, CO, USA. Mercer, S. H.,Geres-Smith, R., Guo, Y., & Squires, B. (2023, February). Validity automated learning progress assessment written expression. Poster presented meeting National Association School Psychologists, Denver, CO, USA. https://doi.org/10.17605/OSF.IO/WHJD3 Matta, M., Keller-Margulis M., & Mercer, S. H. (2022, February). New directions writing assessment: Improving feasibility automated scoring. Presentation meeting National Association School Psychologists, Boston, MA, USA. Matta, M., Keller-Margulis, M., & Mercer, S. H. (2021, July). use automated approaches scoring written expression elementary students. Poster presented meeting International School Psychology Association, online. Matta, Michael, Keller-Margulis, M. ., Mercer, S. H., & Zopatti, K. (2021, February). Improving written-expression curriculum-based measurement feasibility automated text evaluation programs. Paper presented meeting National Association School Psychologists, online. Mercer, S. H., Keller-Margulis, M. ., & Matta, M. (2020, February). Validity automated vs. hand-scored written expression curriculum-based measurement samples. Poster presented Pacific Coast Research Conference, Coronado, CA, USA. Mercer, S. H., & Cannon, J. E. (2020, February). Monitoring written expression gains learners intensive writing intervention. Poster presented Pacific Coast Research Conference, Coronado, CA, USA. Keller-Margulis, M. ., & Mercer, S. H. (2019, August). Validity automated scoring written expression curriculum-based measurement. Poster presented meeting American Psychological Association, Chicago, IL, USA. Mercer, S. H., Tsiriotakis, ., Kwon, E., & Cannon, J. E. (2019, June). Evaluating elementary students’ response intervention written expression. Paper presented meeting Canadian Association Educational Psychology (Canadian Society Study Education), Vancouver, BC, Canada.","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Generate Predicted Writing Quality Scores","text":"project licensed MIT License. See License details.","code":""},{"path":"https://shmercer.github.io/writeAlizer/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Generate Predicted Writing Quality Scores","text":"research reported supported Institute Education Sciences, U.S. Department Education, Grant R305A190100. opinions expressed authors represent views Institute U.S. Department Education. Principal Investigator: Milena Keller-Margulis (University Houston). Co-Principal Investigator: Sterett Mercer (University British Columbia). Co-Principal Investigator: Jorge Gonzalez (University Houston). Co-Investigator: Bruno Zumbo (University British Columbia). work supported Partnership Development Grant (Assessment Effective Intervention Written Expression Students Learning Disabilities) Social Sciences Humanities Research Council Canada. Principal Investigator: Sterett Mercer (University British Columbia). Co-Investigators: Joanna Cannon (UBC) Kate Raven (Learning Disabilities Society Greater Vancouver).","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_coh.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a Coh-Metrix output file (.csv) into R. — import_coh","title":"Import a Coh-Metrix output file (.csv) into R. — import_coh","text":"Import Coh-Metrix output file (.csv) R.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_coh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a Coh-Metrix output file (.csv) into R. — import_coh","text":"","code":"import_coh(path)"},{"path":"https://shmercer.github.io/writeAlizer/reference/import_coh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a Coh-Metrix output file (.csv) into R. — import_coh","text":"path string giving path filename import.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_coh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a Coh-Metrix output file (.csv) into R. — import_coh","text":"base data.frame one row per record following columns: ID (character): unique identifier text/essay. One column per retained Coh-Metrix feature, kept original         feature name (numeric). Feature names mirror Coh-Metrix         output variables. object class data.frame (tibble converted user).","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/import_coh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a Coh-Metrix output file (.csv) into R. — import_coh","text":"","code":"# Example with package sample data file_path <- system.file(\"extdata\", \"sample_coh.csv\", package = \"writeAlizer\") coh_file  <- import_coh(file_path) head(coh_file) #>            ID DESPC DESSC DESWC DESPL DESPLd  DESSL DESSLd DESWLsy DESWLsyd #> 1 C:\\\\test\\\\7    11    13   135 1.182  0.405 10.385  4.464   1.296    0.681 #> 2 C:\\\\test\\\\8    13    18   175 1.385  0.506  9.833  5.090   1.291    0.558 #> 3 C:\\\\test\\\\9    17    22   193 1.294  0.470  9.045  5.131   1.316    0.585 #>   DESWLlt DESWLltd PCNARz PCNARp PCSYNz PCSYNp PCCNCz PCCNCp PCREFz PCREFp #> 1   4.030    2.091  0.644  73.89  0.565  71.23 -0.865  19.49 -1.556   6.06 #> 2   4.120    2.021  0.364  64.06  1.480  92.92  1.717  95.64 -2.322   1.02 #> 3   4.285    2.384  0.597  72.24  0.527  69.85  1.432  92.36 -2.186   1.46 #>   PCDCz PCDCp PCVERBz PCVERBp PCCONNz PCCONNp PCTEMPz PCTEMPp CRFNO1 CRFAO1 #> 1 1.767 96.08   1.101   86.43  -0.067   47.61   0.832   79.67  0.083  0.167 #> 2 1.674 95.25  -1.596    5.59  -5.314    0.00   0.363   64.06  0.000  0.000 #> 3 1.005 84.13  -0.606   27.43  -4.613    0.00   1.413   92.07  0.000  0.095 #>   CRFSO1 CRFNOa CRFAOa CRFSOa CRFCWO1 CRFCWO1d CRFCWOa CRFCWOad CRFANP1 CRFANPa #> 1  0.083  0.067  0.107  0.080   0.063    0.151   0.035    0.083   0.167   0.053 #> 2  0.000  0.048  0.112  0.056   0.000    0.000   0.026    0.077   0.235   0.104 #> 3  0.000  0.024  0.152  0.024   0.017    0.054   0.026    0.064   0.190   0.085 #>   LSASS1 LSASS1d LSASSp LSASSpd LSAPP1 LSAPP1d LSAGN LSAGNd LDTTRc LDTTRa #> 1  0.104   0.111  0.118   0.118  0.100   0.118 0.233  0.147  0.836  0.659 #> 2  0.073   0.112  0.025   0.071  0.102   0.098 0.215  0.092  0.888  0.621 #> 3  0.084   0.121  0.089   0.128  0.093   0.109 0.215  0.096  0.919  0.658 #>    LDMTLD  LDVOCD  CNCAll CNCCaus CNCLogic CNCADC CNCTemp CNCTempx CNCAdd #> 1  63.043  80.677  88.889  44.444   51.852  7.407  29.630   22.222 22.222 #> 2  98.598  87.942 125.714  28.571   74.286 34.286  17.143   17.143 74.286 #> 3 108.407 105.874 124.352  36.269   36.269 20.725  10.363   10.363 72.539 #>    CNCPos CNCNeg SMCAUSv SMCAUSvp SMINTEp SMCAUSr SMINTEr SMCAUSlsa SMCAUSwn #> 1  81.481  7.407  37.037   51.852  22.222   0.333   1.000     0.073    0.439 #> 2  91.429 34.286  51.429   62.857  28.571   0.200   0.833     0.040    0.297 #> 3 103.627 15.544  36.269   62.176  31.088   0.625   0.857     0.051    0.359 #>   SMTEMP SYNLE SYNNP SYNMEDpos SYNMEDwrd SYNMEDlem SYNSTRUTa SYNSTRUTt    DRNP #> 1  0.917 0.846 0.703     0.742     0.938     0.938     0.065     0.064 370.370 #> 2  0.853 1.500 0.673     0.891     0.975     0.975     0.045     0.066 337.143 #> 3  0.952 1.545 0.820     0.772     0.973     0.948     0.071     0.081 326.425 #>      DRVP   DRAP    DRPP DRPVAL  DRNEG DRGERUND  DRINF WRDNOUN WRDVERB WRDADJ #> 1 229.630 44.444 140.741  7.407 14.815    7.407 22.222 214.815 148.147 81.481 #> 2 251.429 28.571  91.429 11.429  5.714   22.857 17.143 211.429 154.285 91.428 #> 3 248.705 41.451  72.539  0.000 10.363   25.907 20.725 207.254 155.441 88.083 #>   WRDADV  WRDPRO WRDPRP1s WRDPRP1p WRDPRP2 WRDPRP3s WRDPRP3p WRDFRQc WRDFRQa #> 1 59.259  51.852    7.407        0   0.000   44.444    0.000   2.720   3.331 #> 2 34.286  91.429    0.000        0   5.714   74.286    0.000   2.095   3.013 #> 3 51.813 103.627    0.000        0   0.000   82.902   10.363   2.115   3.051 #>   WRDFRQmc WRDAOAc WRDFAMc WRDCNCc WRDIMGc WRDMEAc WRDPOLc WRDHYPn WRDHYPv #> 1    1.703 330.250 574.958 362.043 407.979 429.614   4.020   5.358   1.676 #> 2    1.362 277.905 553.695 424.508 466.831 439.127   3.943   6.508   1.797 #> 3    1.442 292.227 564.014 408.095 444.754 439.589   4.959   6.508   1.601 #>   WRDHYPnv  RDFRE RDFKGL   RDL2 #> 1    1.394 86.653  3.753 22.648 #> 2    1.628 87.749  3.435  4.236 #> 3    1.502 86.597  3.360  7.163"},{"path":"https://shmercer.github.io/writeAlizer/reference/import_gamet.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a GAMET output file into R. — import_gamet","title":"Import a GAMET output file into R. — import_gamet","text":"Import GAMET output file R.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_gamet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a GAMET output file into R. — import_gamet","text":"","code":"import_gamet(path)"},{"path":"https://shmercer.github.io/writeAlizer/reference/import_gamet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a GAMET output file into R. — import_gamet","text":"path string giving path filename import.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_gamet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a GAMET output file into R. — import_gamet","text":"base data.frame one row per record following columns: ID (character): unique identifier text/essay. One column per retained GAMET error/category variable (numeric;         typically counts rates). Column names follow GAMET output         variable names. object class data.frame (tibble converted user).","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/import_gamet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a GAMET output file into R. — import_gamet","text":"","code":"# Example with package sample data file_path   <- system.file(\"extdata\", \"sample_gamet.csv\", package = \"writeAlizer\") gamet_file  <- import_gamet(file_path) head(gamet_file) #>       ID error_count word_count grammar misspelling duplication typographical #> 1 txt\\\\7           6        135       0           6           0             0 #> 2 txt\\\\8           4        171       0           3           0             1 #> 3 txt\\\\9           3        191       0           2           0             1 #>   whitespace per_gram  per_spell #> 1          0        0 0.04444444 #> 2          0        0 0.01754386 #> 3          0        0 0.01047120"},{"path":"https://shmercer.github.io/writeAlizer/reference/import_merge_gamet_rb.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a ReaderBench output file (.csv) and GAMET output file (.csv), and merge the two files on ID. — import_merge_gamet_rb","title":"Import a ReaderBench output file (.csv) and GAMET output file (.csv), and merge the two files on ID. — import_merge_gamet_rb","text":"Import ReaderBench output file (.csv) GAMET output file (.csv), merge two files ID.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_merge_gamet_rb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a ReaderBench output file (.csv) and GAMET output file (.csv), and merge the two files on ID. — import_merge_gamet_rb","text":"","code":"import_merge_gamet_rb(rb_path, gamet_path)"},{"path":"https://shmercer.github.io/writeAlizer/reference/import_merge_gamet_rb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a ReaderBench output file (.csv) and GAMET output file (.csv), and merge the two files on ID. — import_merge_gamet_rb","text":"rb_path string giving path ReaderBench filename import. gamet_path string giving path GAMET filename import.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_merge_gamet_rb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a ReaderBench output file (.csv) and GAMET output file (.csv), and merge the two files on ID. — import_merge_gamet_rb","text":"base data.frame created joining ReaderBench GAMET tables ID, one row per matched ID following columns: ID (character): identifier present sources. retained ReaderBench feature columns (numeric). retained GAMET error/category columns (numeric). default, IDs present inputs kept (inner join). feature name appears sources, standard merge suffixes (e.g., .x/.y) may applied join implementation. object class data.frame (tibble converted user).","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/import_merge_gamet_rb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a ReaderBench output file (.csv) and GAMET output file (.csv), and merge the two files on ID. — import_merge_gamet_rb","text":"","code":"# Example with package sample data rb_path   <- system.file(\"extdata\", \"sample_rb.csv\", package = \"writeAlizer\") gam_path  <- system.file(\"extdata\", \"sample_gamet.csv\", package = \"writeAlizer\") rb_gam    <- import_merge_gamet_rb(rb_path, gam_path) head(rb_gam) #>   [1] ID                                                 #>   [2] error_count                                        #>   [3] word_count                                         #>   [4] grammar                                            #>   [5] misspelling                                        #>   [6] duplication                                        #>   [7] typographical                                      #>   [8] whitespace                                         #>   [9] per_gram                                           #>  [10] per_spell                                          #>  [11] Paragraphs                                         #>  [12] Sentences                                          #>  [13] Words                                              #>  [14] Content.words                                      #>  [15] RB.RdbltyFlesch                                    #>  [16] RB.RdbltyFog                                       #>  [17] RB.RdbltyKincaid                                   #>  [18] RB.RdbltyDaleChall                                 #>  [19] RB.AvgBlLen                                        #>  [20] RB.AvgCommaBl                                      #>  [21] RB.AvgCommaSen                                     #>  [22] RB.AvgSenLen                                       #>  [23] RB.AvgSenBl                                        #>  [24] RB.AvgUnqWdBl                                      #>  [25] RB.AvgUnqWdSen                                     #>  [26] RB.AvgWdLen                                        #>  [27] RB.AvgWdBl                                         #>  [28] RB.AvgWdSen                                        #>  [29] RB.CharEnt                                         #>  [30] RB.BlStDevSen                                      #>  [31] RB.BlStDevUnq                                      #>  [32] RB.SenStDevUnqWd                                   #>  [33] RB.BlStdDevWd                                      #>  [34] RB.SenStdDevWd                                     #>  [35] RB.WdEnt                                           #>  [36] RB.WdLettStdDev                                    #>  [37] RB.LxcDiv                                          #>  [38] RB.LxcSoph                                         #>  [39] RB.SynDiv                                          #>  [40] RB.SynSoph                                         #>  [41] RB.CAF                                             #>  [42] RB.AvgNounBl                                       #>  [43] RB.AvgPronounBl                                    #>  [44] RB.AvgVerbBl                                       #>  [45] RB.AvgAdverbBl                                     #>  [46] RB.AvgAdjectiveBl                                  #>  [47] RB.AvgPrepositionBl                                #>  [48] RB.AvgNounSen                                      #>  [49] RB.AvgPronounSen                                   #>  [50] RB.AvgVerbSen                                      #>  [51] RB.AvgAdverbSen                                    #>  [52] RB.AvgAdjectiveSen                                 #>  [53] RB.AvgPrepositionSen                               #>  [54] RB.AvgUnqNoundBl                                   #>  [55] RB.AvgUnqPronounBl                                 #>  [56] RB.AvgUnqVerbBl                                    #>  [57] RB.AvgUnqAdverbBl                                  #>  [58] RB.AvgUnqAdjectiveBl                               #>  [59] RB.AvgUnqPrepositionBl                             #>  [60] RB.AvgPronBl_first_person                          #>  [61] RB.AggPronSen_first_person                         #>  [62] RB.AvgPronBl_indefinite                            #>  [63] RB.AggPronSen_indefinite                           #>  [64] RB.AvgPronBl_interrogative                         #>  [65] RB.AggPronSen_interrogative                        #>  [66] RB.AvgPronBl_second_person                         #>  [67] RB.AggPronSen_second_person                        #>  [68] RB.AvgPronBl_third_person                          #>  [69] RB.AggPronSen_third_person                         #>  [70] RB.AvgSemDep                                       #>  [71] RB.WdDiffLemmaStem                                 #>  [72] RB.WdDiffWdStem                                    #>  [73] RB.WdMaxDpthHypernymTree                           #>  [74] RB.WdAvgDpthHypernymTree                           #>  [75] RB.WdPathCntHypernymTree                           #>  [76] RB.WdPolysemyCnt                                   #>  [77] RB.WdSylCnt                                        #>  [78] RB.AvgAOADoc_Shock                                 #>  [79] RB.AvgAOABl_Shock                                  #>  [80] RB.AvgAOASen_Shock                                 #>  [81] RB.AvgAOADoc_Cortese                               #>  [82] RB.AvgAOABl_Cortese                                #>  [83] RB.AvgAOASen_Cortese                               #>  [84] RB.AvgAOADoc_Kuperman                              #>  [85] RB.AvgAOABl_Kuperman                               #>  [86] RB.AvgAOASen_Kuperman                              #>  [87] RB.AvgAOADoc_Bird                                  #>  [88] RB.AvgAOABl_Bird                                   #>  [89] RB.AvgAOASen_Bird                                  #>  [90] RB.AvgAOADoc_Bristol                               #>  [91] RB.AvgAOABl_Bristol                                #>  [92] RB.AvgAOASen_Bristol                               #>  [93] RB.AvgAOEDoc_IndexPolynomialFitAboveThreshold.0.3. #>  [94] RB.AvgAOEBl_IndexPolynomialFitAboveThreshold.0.3.  #>  [95] RB.AvgAOESen_IndexPolynomialFitAboveThreshold.0.3. #>  [96] RB.AvgAOEDoc_InverseLinearRegressionSlope          #>  [97] RB.AvgAOEBl_InverseLinearRegressionSlope           #>  [98] RB.AvgAOESen_InverseLinearRegressionSlope          #>  [99] RB.AvgAOEDoc_InflectionPointPolynomial             #> [100] RB.AvgAOEBl_InflectionPointPolynomial              #> [101] RB.AvgAOESen_InflectionPointPolynomial             #> [102] RB.AvgAOEDoc_InverseAverage                        #> [103] RB.AvgAOEBl_InverseAverage                         #> [104] RB.AvgAOESen_InverseAverage                        #> [105] RB.AvgAOEDoc_IndexAboveThreshold.0.3.              #> [106] RB.AvgAOEBl_IndexAboveThreshold.0.3.               #> [107] RB.AvgAOESen_IndexAboveThreshold.0.3.              #> [108] RB.AvgNmdEntBl                                     #> [109] RB.AvgNounNmdEntBl                                 #> [110] RB.AvgUnqNmdEntBl                                  #> [111] RB.AvgNmdEntSen                                    #> [112] RB.TCorefChainDoc                                  #> [113] RB.AvgCorefChain                                   #> [114] RB.AvgChainSpan                                    #> [115] RB.AvgInferenceDistChain                           #> [116] RB.TActCorefChainWd                                #> [117] RB.TCorefChainBigSpan                              #> [118] RB.AvgConnBl_addition                              #> [119] RB.AvgConnSen_addition                             #> [120] RB.AvgConnBl_complex_subordinators                 #> [121] RB.AvgConnSen_complex_subordinators                #> [122] RB.AvgConnBl_concessions                           #> [123] RB.AvgConnSen_concessions                          #> [124] RB.AvgConnBl_conditions                            #> [125] RB.AvgConnSen_conditions                           #> [126] RB.AvgConnBl_conjunctions                          #> [127] RB.AvgConnSen_conjunctions                         #> [128] RB.AvgConnBl_conjuncts                             #> [129] RB.AvgConnSen_conjuncts                            #> [130] RB.AvgConnBl_contrasts                             #> [131] RB.AvgConnSen_contrasts                            #> [132] RB.AvgConnBl_coordinating_conjuncts                #> [133] RB.AvgConnSen_coordinating_conjuncts               #> [134] RB.AvgConnBl_coordinating_connectives              #> [135] RB.AvgConnSen_coordinating_connectives             #> [136] RB.AvgConnBl_disjunctions                          #> [137] RB.AvgConnSen_disjunctions                         #> [138] RB.AvgConnBl_logical_connectors                    #> [139] RB.AvgConnSen_logical_connectors                   #> [140] RB.AvgConnBl_oppositions                           #> [141] RB.AvgConnSen_oppositions                          #> [142] RB.AvgConnBl_order                                 #> [143] RB.AvgConnSen_order                                #> [144] RB.AvgConnBl_quasi_coordinators                    #> [145] RB.AvgConnSen_quasi_coordinators                   #> [146] RB.AvgConnBl_reason_and_purpose                    #> [147] RB.AvgConnSen_reason_and_purpose                   #> [148] RB.AvgConnBl_reference                             #> [149] RB.AvgConnSen_reference                            #> [150] RB.AvgConnBl_semi_coordinators                     #> [151] RB.AvgConnSen_semi_coordinators                    #> [152] RB.AvgConnBl_sentence_linking                      #> [153] RB.AvgConnSen_sentence_linking                     #> [154] RB.AvgConnBl_simple_subordinators                  #> [155] RB.AvgConnSen_simple_subordinators                 #> [156] RB.AvgConnBl_temporal_connectors                   #> [157] RB.AvgConnSen_temporal_connectors                  #> [158] RB.LexChainAvgSpan                                 #> [159] RB.LexChainMaxSp                                   #> [160] RB.AvgLexChain                                     #> [161] RB.PercLexChainCoverage                            #> [162] RB.AvgBlScore                                      #> [163] RB.AvgSenScore                                     #> [164] RB.BlScoreStDev                                    #> [165] RB.SenScoreStDev                                   #> [166] RB.AvgBlAdjCoh_LeackockChodorow                    #> [167] RB.AvgBlDocCoh_LeackockChodorow                    #> [168] RB.AvgInterBlCoh_LeackockChodorow                  #> [169] RB.AvgIntraBlCoh_LeackockChodorow                  #> [170] RB.AvgMidEndCoh_LeackockChodorow                   #> [171] RB.AvgSenAdjCoh_LeackockChodorow                   #> [172] RB.AvgSenBlCoh_LeackockChodorow                    #> [173] RB.AvgStartMidCoh_LeackockChodorow                 #> [174] RB.AvgTransCoh_LeackockChodorow                    #> [175] RB.AvgStartEndCoh_LeackockChodorow                 #> [176] RB.DocFlAbsPosAcc_LeackockChodorow_MaxVal          #> [177] RB.DocFlAbsDistAcc_LeackockChodorow_MaxVal         #> [178] RB.DocFlAdjAcc_LeackockChodorow_MaxVal             #> [179] RB.DocFlAvgCoh_LeackockChodorow_MaxVal             #> [180] RB.DocFlMaxOrdSeq_LeackockChodorow_MaxVal          #> [181] RB.DocFlSpearmamCorr_LeackockChodorow_MaxVal       #> [182] RB.DocFlAbsPosAcc_LeackockChodorow_AbvMeanStdev    #> [183] RB.DocFlAbsDistAcc_LeackockChodorow_AbvMeanStdev   #> [184] RB.DocFlAdjAcc_LeackockChodorow_AbvMeanStdev       #> [185] RB.DocFlAvgCoh_LeackockChodorow_AbvMeanStdev       #> [186] RB.DocFlMaxOrdSeq_LeackockChodorow_AbvMeanStdev    #> [187] RB.DocFlSpearmamCorr_LeackockChodorow_AbvMeanStdev #> [188] RB.AvgBlAdjCoh_WuPalmer                            #> [189] RB.AvgBlDocCoh_WuPalmer                            #> [190] RB.AvgInterBlCoh_WuPalmer                          #> [191] RB.AvgIntraBlCoh_WuPalmer                          #> [192] RB.AvgMidEndCoh_WuPalmer                           #> [193] RB.AvgSenAdjCoh_WuPalmer                           #> [194] RB.AvgSenBlCoh_WuPalmer                            #> [195] RB.AvgStartMidCoh_WuPalmer                         #> [196] RB.AvgTransCoh_WuPalmer                            #> [197] RB.AvgStartEndCoh_WuPalmer                         #> [198] RB.DocFlAbsPosAcc_WuPalmer_MaxVal                  #> [199] RB.DocFlAbsDistAcc_WuPalmer_MaxVal                 #> [200] RB.DocFlAdjAcc_WuPalmer_MaxVal                     #> [201] RB.DocFlAvgCoh_WuPalmer_MaxVal                     #> [202] RB.DocFlMaxOrdSeq_WuPalmer_MaxVal                  #> [203] RB.DocFlSpearmamCorr_WuPalmer_MaxVal               #> [204] RB.DocFlAbsPosAcc_WuPalmer_AbvMeanStdev            #> [205] RB.DocFlAbsDistAcc_WuPalmer_AbvMeanStdev           #> [206] RB.DocFlAdjAcc_WuPalmer_AbvMeanStdev               #> [207] RB.DocFlAvgCoh_WuPalmer_AbvMeanStdev               #> [208] RB.DocFlMaxOrdSeq_WuPalmer_AbvMeanStdev            #> [209] RB.DocFlSpearmamCorr_WuPalmer_AbvMeanStdev         #> [210] RB.AvgBlAdjCoh_Path                                #> [211] RB.AvgBlDocCoh_Path                                #> [212] RB.AvgInterBlCoh_Path                              #> [213] RB.AvgIntraBlCoh_Path                              #> [214] RB.AvgMidEndCoh_Path                               #> [215] RB.AvgSenAdjCoh_Path                               #> [216] RB.AvgSenBlCoh_Path                                #> [217] RB.AvgStartMidCoh_Path                             #> [218] RB.AvgTransCoh_Path                                #> [219] RB.AvgStartEndCoh_Path                             #> [220] RB.DocFlAbsPosAcc_Path_MaxVal                      #> [221] RB.DocFlAbsDistAcc_Path_MaxVal                     #> [222] RB.DocFlAdjAcc_Path_MaxVal                         #> [223] RB.DocFlAvgCoh_Path_MaxVal                         #> [224] RB.DocFlMaxOrdSeq_Path_MaxVal                      #> [225] RB.DocFlSpearmamCorr_Path_MaxVal                   #> [226] RB.DocFlAbsPosAcc_Path_AbvMeanStdev                #> [227] RB.DocFlAbsDistAcc_Path_AbvMeanStdev               #> [228] RB.DocFlAdjAcc_Path_AbvMeanStdev                   #> [229] RB.DocFlAvgCoh_Path_AbvMeanStdev                   #> [230] RB.DocFlMaxOrdSeq_Path_AbvMeanStdev                #> [231] RB.DocFlSpearmamCorr_Path_AbvMeanStdev             #> [232] RB.AvgBlAdjCoh_LSA                                 #> [233] RB.AvgBlDocCoh_LSA                                 #> [234] RB.AvgInterBlCoh_LSA                               #> [235] RB.AvgIntraBlCoh_LSA                               #> [236] RB.AvgMidEndCoh_LSA                                #> [237] RB.AvgSenAdjCoh_LSA                                #> [238] RB.AvgSenBlCoh_LSA                                 #> [239] RB.AvgStartMidCoh_LSA                              #> [240] RB.AvgTransCoh_LSA                                 #> [241] RB.AvgStartEndCoh_LSA                              #> [242] RB.DocFlAbsPosAcc_LSA_MaxVal                       #> [243] RB.DocFlAbsDistAcc_LSA_MaxVal                      #> [244] RB.DocFlAdjAcc_LSA_MaxVal                          #> [245] RB.DocFlAvgCoh_LSA_MaxVal                          #> [246] RB.DocFlMaxOrdSeq_LSA_MaxVal                       #> [247] RB.DocFlSpearmamCorr_LSA_MaxVal                    #> [248] RB.DocFlAbsPosAcc_LSA_AbvMeanStdev                 #> [249] RB.DocFlAbsDistAcc_LSA_AbvMeanStdev                #> [250] RB.DocFlAdjAcc_LSA_AbvMeanStdev                    #> [251] RB.DocFlAvgCoh_LSA_AbvMeanStdev                    #> [252] RB.DocFlMaxOrdSeq_LSA_AbvMeanStdev                 #> [253] RB.DocFlSpearmamCorr_LSA_AbvMeanStdev              #> [254] RB.AvgBlAdjCoh_LDA                                 #> [255] RB.AvgBlDocCoh_LDA                                 #> [256] RB.AvgInterBlCoh_LDA                               #> [257] RB.AvgIntraBlCoh_LDA                               #> [258] RB.AvgMidEndCoh_LDA                                #> [259] RB.AvgSenAdjCoh_LDA                                #> [260] RB.AvgSenBlCoh_LDA                                 #> [261] RB.AvgStartMidCoh_LDA                              #> [262] RB.AvgTransCoh_LDA                                 #> [263] RB.AvgStartEndCoh_LDA                              #> [264] RB.DocFlAbsPosAcc_LDA_MaxVal                       #> [265] RB.DocFlAbsDistAcc_LDA_MaxVal                      #> [266] RB.DocFlAdjAcc_LDA_MaxVal                          #> [267] RB.DocFlAvgCoh_LDA_MaxVal                          #> [268] RB.DocFlMaxOrdSeq_LDA_MaxVal                       #> [269] RB.DocFlSpearmamCorr_LDA_MaxVal                    #> [270] RB.DocFlAbsPosAcc_LDA_AbvMeanStdev                 #> [271] RB.DocFlAbsDistAcc_LDA_AbvMeanStdev                #> [272] RB.DocFlAdjAcc_LDA_AbvMeanStdev                    #> [273] RB.DocFlAvgCoh_LDA_AbvMeanStdev                    #> [274] RB.DocFlMaxOrdSeq_LDA_AbvMeanStdev                 #> [275] RB.DocFlSpearmamCorr_LDA_AbvMeanStdev              #> [276] RB.AvgBlAdjCoh_word2vec                            #> [277] RB.AvgBlDocCoh_word2vec                            #> [278] RB.AvgInterBlCoh_word2vec                          #> [279] RB.AvgIntraBlCoh_word2vec                          #> [280] RB.AvgMidEndCoh_word2vec                           #> [281] RB.AvgSenAdjCoh_word2vec                           #> [282] RB.AvgSenBlCoh_word2vec                            #> [283] RB.AvgStartMidCoh_word2vec                         #> [284] RB.AvgTransCoh_word2vec                            #> [285] RB.AvgStartEndCoh_word2vec                         #> [286] RB.DocFlAbsPosAcc_word2vec_MaxVal                  #> [287] RB.DocFlAbsDistAcc_word2vec_MaxVal                 #> [288] RB.DocFlAdjAcc_word2vec_MaxVal                     #> [289] RB.DocFlAvgCoh_word2vec_MaxVal                     #> [290] RB.DocFlMaxOrdSeq_word2vec_MaxVal                  #> [291] RB.DocFlSpearmamCorr_word2vec_MaxVal               #> [292] RB.DocFlAbsPosAcc_word2vec_AbvMeanStdev            #> [293] RB.DocFlAbsDistAcc_word2vec_AbvMeanStdev           #> [294] RB.DocFlAdjAcc_word2vec_AbvMeanStdev               #> [295] RB.DocFlAvgCoh_word2vec_AbvMeanStdev               #> [296] RB.DocFlMaxOrdSeq_word2vec_AbvMeanStdev            #> [297] RB.DocFlSpearmamCorr_word2vec_AbvMeanStdev         #> [298] RB.AvgBlVoiceCoOcc                                 #> [299] RB.AvgSenVoiceCoOcc                                #> [300] RB.BlVoiceCoOccStDev                               #> [301] RB.SenVoiceCoOccStDev                              #> [302] RB.AvgBlVoiceCumEff                                #> [303] RB.AvgSenVoiceCumEff                               #> [304] RB.BlVoiceCumEffStDev                              #> [305] RB.SenVoiceCumEffStDev                             #> [306] RB.AvgBlVoiceMI                                    #> [307] RB.AvgSenVoiceMI                                   #> [308] RB.BlVoiceMIStDev                                  #> [309] RB.SenVoiceMIStDev                                 #> [310] RB.AvgVoice                                        #> [311] RB.AvgVoiceBlDist                                  #> [312] RB.AvgVoiceBlEnt                                   #> [313] RB.AvgVoiceReccBl                                  #> [314] RB.AvgVoiceReccSen                                 #> [315] RB.AvgVoiceSenDist                                 #> [316] RB.AvgVoiceSenEnt                                  #> [317] RB.VoiceBlDistStDev                                #> [318] RB.VoiceReccBlDistStDev                            #> [319] RB.VoiceReccSenStDev                               #> [320] RB.VoiceSenDistStDev                               #> [321] RB.VoiceAvgSpan                                    #> [322] RB.VoiceMaxSpan                                    #> [323] RB.AvgSenSyll                                      #> [324] RB.AvgSenStressedSyll                              #> [325] RB.AvgRhythmUnits                                  #> [326] RB.AvgRhythmUnitSyll                               #> [327] RB.AvgRhythmUnitStreesSyll                         #> [328] RB.LangRhythmCoeff                                 #> [329] RB.LangRhythmId                                    #> [330] RB.FrqRhythmId                                     #> [331] RB.LangRhythmDiameter                              #> [332] RB.SenAllit                                        #> [333] RB.SenAsson                                        #> [334] RB.AvgDepsBl_acl                                   #> [335] RB.AvgDepsSen_acl                                  #> [336] RB.AvgDepsBl_advcl                                 #> [337] RB.AvgDepsSen_advcl                                #> [338] RB.AvgDepsBl_advmod                                #> [339] RB.AvgDepsSen_advmod                               #> [340] RB.AvgDepsBl_amod                                  #> [341] RB.AvgDepsSen_amod                                 #> [342] RB.AvgDepsBl_appos                                 #> [343] RB.AvgDepsSen_appos                                #> [344] RB.AvgDepsBl_aux                                   #> [345] RB.AvgDepsSen_aux                                  #> [346] RB.AvgDepsBl_auxpass                               #> [347] RB.AvgDepsSen_auxpass                              #> [348] RB.AvgDepsBl_case                                  #> [349] RB.AvgDepsSen_case                                 #> [350] RB.AvgDepsBl_cc                                    #> [351] RB.AvgDepsSen_cc                                   #> [352] RB.AvgDepsBl_ccomp                                 #> [353] RB.AvgDepsSen_ccomp                                #> [354] RB.AvgDepsBl_compound                              #> [355] RB.AvgDepsSen_compound                             #> [356] RB.AvgDepsBl_conj                                  #> [357] RB.AvgDepsSen_conj                                 #> [358] RB.AvgDepsBl_cop                                   #> [359] RB.AvgDepsSen_cop                                  #> [360] RB.AvgDepsBl_csubj                                 #> [361] RB.AvgDepsSen_csubj                                #> [362] RB.AvgDepsBl_csubjpass                             #> [363] RB.AvgDepsSen_csubjpass                            #> [364] RB.AvgDepsBl_dep                                   #> [365] RB.AvgDepsSen_dep                                  #> [366] RB.AvgDepsBl_det                                   #> [367] RB.AvgDepsSen_det                                  #> [368] RB.AvgDepsBl_discourse                             #> [369] RB.AvgDepsSen_discourse                            #> [370] RB.AvgDepsBl_dislocated                            #> [371] RB.AvgDepsSen_dislocated                           #> [372] RB.AvgDepsBl_dobj                                  #> [373] RB.AvgDepsSen_dobj                                 #> [374] RB.AvgDepsBl_expl                                  #> [375] RB.AvgDepsSen_expl                                 #> [376] RB.AvgDepsBl_foreign                               #> [377] RB.AvgDepsSen_foreign                              #> [378] RB.AvgDepsBl_goeswith                              #> [379] RB.AvgDepsSen_goeswith                             #> [380] RB.AvgDepsBl_iobj                                  #> [381] RB.AvgDepsSen_iobj                                 #> [382] RB.AvgDepsBl_list                                  #> [383] RB.AvgDepsSen_list                                 #> [384] RB.AvgDepsBl_mark                                  #> [385] RB.AvgDepsSen_mark                                 #> [386] RB.AvgDepsBl_mwe                                   #> [387] RB.AvgDepsSen_mwe                                  #> [388] RB.AvgDepsBl_name                                  #> [389] RB.AvgDepsSen_name                                 #> [390] RB.AvgDepsBl_neg                                   #> [391] RB.AvgDepsSen_neg                                  #> [392] RB.AvgDepsBl_nmod                                  #> [393] RB.AvgDepsSen_nmod                                 #> [394] RB.AvgDepsBl_nsubj                                 #> [395] RB.AvgDepsSen_nsubj                                #> [396] RB.AvgDepsBl_nsubjpass                             #> [397] RB.AvgDepsSen_nsubjpass                            #> [398] RB.AvgDepsBl_nummod                                #> [399] RB.AvgDepsSen_nummod                               #> [400] RB.AvgDepsBl_parataxis                             #> [401] RB.AvgDepsSen_parataxis                            #> [402] RB.AvgDepsBl_punct                                 #> [403] RB.AvgDepsSen_punct                                #> [404] RB.AvgDepsBl_remnant                               #> [405] RB.AvgDepsSen_remnant                              #> [406] RB.AvgDepsBl_reparandum                            #> [407] RB.AvgDepsSen_reparandum                           #> [408] RB.AvgDepsBl_root                                  #> [409] RB.AvgDepsSen_root                                 #> [410] RB.AvgDepsBl_vocative                              #> [411] RB.AvgDepsSen_vocative                             #> [412] RB.AvgDepsBl_xcomp                                 #> [413] RB.AvgDepsSen_xcomp                                #> <0 rows> (or 0-length row.names)"},{"path":"https://shmercer.github.io/writeAlizer/reference/import_rb.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a ReaderBench output file (.csv) into R. — import_rb","title":"Import a ReaderBench output file (.csv) into R. — import_rb","text":"available, function reads header packaged sample (inst/extdata/sample_rb.csv) keeps first 404 columns NAME (plus File.name/ID column), excluding columns names appearing position 404 header. sample unavailable, falls back keeping first 404 columns position.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_rb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a ReaderBench output file (.csv) into R. — import_rb","text":"","code":"import_rb(path)"},{"path":"https://shmercer.github.io/writeAlizer/reference/import_rb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a ReaderBench output file (.csv) into R. — import_rb","text":"path string giving path filename import.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/import_rb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a ReaderBench output file (.csv) into R. — import_rb","text":"base data.frame one row per record following columns: ID (character): unique identifier text/essay. One column per retained ReaderBench feature, kept original         feature name (numeric). Feature names mirror ReaderBench         output variables. object class data.frame (tibble converted user).","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/import_rb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a ReaderBench output file (.csv) into R. — import_rb","text":"","code":"# Fast, runnable example with package sample data file_path <- system.file(\"extdata\", \"sample_rb.csv\", package = \"writeAlizer\") rb_file   <- import_rb(file_path) head(rb_file) #>   ID Paragraphs Sentences Words Content.words RB.RdbltyFlesch RB.RdbltyFog #> 1  7         11        13   135            48        61.61668     14.65185 #> 2  8         13        18   168            69        68.87622     11.35702 #> 3  9         17        22   189            81        66.90096     10.09312 #>   RB.RdbltyKincaid RB.RdbltyDaleChall RB.AvgBlLen RB.AvgCommaBl RB.AvgCommaSen #> 1        11.372593           7.660466    23.09091     0.8181818      0.6923077 #> 2         8.962624           7.727356    28.23077     0.6923077      0.5000000 #> 3         9.144974           7.952616    25.52941     0.9411765      0.7272727 #>   RB.AvgSenLen RB.AvgSenBl RB.AvgUnqWdBl RB.AvgUnqWdSen RB.AvgWdLen RB.AvgWdBl #> 1     19.53846    1.181818      4.272727       3.615385    5.291667   4.363636 #> 2     20.38889    1.384615      5.307692       3.833333    5.318841   5.307692 #> 3     19.72727    1.294118      4.705882       3.681818    5.358025   4.764706 #>   RB.AvgWdSen RB.CharEnt RB.BlStDevSen RB.BlStDevUnq RB.SenStDevUnqWd #> 1    3.692308   3.029485     0.4045199      1.737292         1.660244 #> 2    3.833333   2.972067     0.5063697      2.136376         2.357716 #> 3    3.681818   2.948719     0.4696682      2.494111         2.378202 #>   RB.BlStdDevWd RB.SenStdDevWd RB.WdEnt RB.WdLettStdDev RB.LxcDiv RB.LxcSoph #> 1      1.804036       1.750458 4.240761        2.041676  3.742771   3.916667 #> 2      2.136376       2.357716 4.356472        1.693350  4.574957   3.825581 #> 3      2.537947       2.378202 4.496810        1.919040  4.925183   3.960396 #>   RB.SynDiv RB.SynSoph   RB.CAF RB.AvgNounBl RB.AvgPronounBl RB.AvgVerbBl #> 1 0.4893617   4.285714 6.443732     2.818182       0.6363636     2.363636 #> 2 0.4779412   4.526316 7.145781     2.846154       1.3076923     2.692308 #> 3 0.4937500   4.391304 7.189784     2.470588       1.1764706     2.117647 #>   RB.AvgAdverbBl RB.AvgAdjectiveBl RB.AvgPrepositionBl RB.AvgNounSen #> 1      0.7272727         1.0000000            1.909091      2.384615 #> 2      0.6923077         0.7692308            1.230769      2.055556 #> 3      0.6470588         0.7647059            1.235294      1.909091 #>   RB.AvgPronounSen RB.AvgVerbSen RB.AvgAdverbSen RB.AvgAdjectiveSen #> 1        0.5384615      2.000000       0.6153846          0.8461538 #> 2        0.9444444      1.944444       0.5000000          0.5555556 #> 3        0.9090909      1.636364       0.5000000          0.5909091 #>   RB.AvgPrepositionSen RB.AvgUnqNoundBl RB.AvgUnqPronounBl RB.AvgUnqVerbBl #> 1            1.6153846         2.727273          0.6363636        2.181818 #> 2            0.8888889         2.846154          1.1538462        2.615385 #> 3            0.9545455         2.470588          1.1176471        2.000000 #>   RB.AvgUnqAdverbBl RB.AvgUnqAdjectiveBl RB.AvgUnqPrepositionBl #> 1         0.7272727            1.0000000               1.727273 #> 2         0.6923077            0.7692308               1.153846 #> 3         0.6470588            0.7647059               1.235294 #>   RB.AvgPronBl_first_person RB.AggPronSen_first_person RB.AvgPronBl_indefinite #> 1                0.09090909                 0.07692308               0.8181818 #> 2                0.00000000                 0.00000000               0.7692308 #> 3                0.00000000                 0.00000000               0.4117647 #>   RB.AggPronSen_indefinite RB.AvgPronBl_interrogative #> 1                0.6923077                  0.2727273 #> 2                0.5555556                  0.0000000 #> 3                0.3181818                  0.0000000 #>   RB.AggPronSen_interrogative RB.AvgPronBl_second_person #> 1                   0.2307692                 0.00000000 #> 2                   0.0000000                 0.07692308 #> 3                   0.0000000                 0.00000000 #>   RB.AggPronSen_second_person RB.AvgPronBl_third_person #> 1                  0.00000000                 0.5454545 #> 2                  0.05555556                 1.2307692 #> 3                  0.00000000                 1.1764706 #>   RB.AggPronSen_third_person RB.AvgSemDep RB.WdDiffLemmaStem RB.WdDiffWdStem #> 1                  0.4615385     11.84615          0.5000000       0.7708333 #> 2                  0.8888889     11.22222          0.3043478       0.7826087 #> 3                  0.9090909     10.80952          0.2469136       0.6543210 #>   RB.WdMaxDpthHypernymTree RB.WdAvgDpthHypernymTree RB.WdPathCntHypernymTree #> 1                 3.833333                 3.625000                0.7708333 #> 2                 5.449275                 5.275362                0.9855072 #> 3                 5.049383                 4.925926                0.8765432 #>   RB.WdPolysemyCnt RB.WdSylCnt RB.AvgAOADoc_Shock RB.AvgAOABl_Shock #> 1         6.708333    1.479167           4.037000          2.584394 #> 2         7.666667    1.420290           4.092000          2.886282 #> 3         9.530864    1.432099           3.728421          2.584020 #>   RB.AvgAOASen_Shock RB.AvgAOADoc_Cortese RB.AvgAOABl_Cortese #> 1           2.422308             3.006667            2.683939 #> 2           2.084537             3.342222            3.053974 #> 3           1.996742             2.988000            2.621569 #>   RB.AvgAOASen_Cortese RB.AvgAOADoc_Kuperman RB.AvgAOABl_Kuperman #> 1             2.485769              5.750000             6.146818 #> 2             3.058796              6.337794             6.682091 #> 3             2.744773              5.565195             5.327396 #>   RB.AvgAOASen_Kuperman RB.AvgAOADoc_Bird RB.AvgAOABl_Bird RB.AvgAOASen_Bird #> 1              5.908218          315.0000         292.7652          293.7538 #> 2              6.420403          312.8214         278.1859          217.6620 #> 3              5.260277          313.6977         247.8324          259.7871 #>   RB.AvgAOADoc_Bristol RB.AvgAOABl_Bristol RB.AvgAOASen_Bristol #> 1             335.7059            275.6515             233.2436 #> 2             295.8684            252.9314             229.7738 #> 3             300.7647            257.9461             214.3674 #>   RB.AvgAOEDoc_IndexPolynomialFitAboveThreshold.0.3. #> 1                                           2.391304 #> 2                                           3.014493 #> 3                                           3.111111 #>   RB.AvgAOEBl_IndexPolynomialFitAboveThreshold.0.3. #> 1                                          2.597835 #> 2                                          3.347436 #> 3                                          3.060317 #>   RB.AvgAOESen_IndexPolynomialFitAboveThreshold.0.3. #> 1                                           2.453297 #> 2                                           3.126058 #> 3                                           2.893903 #>   RB.AvgAOEDoc_InverseLinearRegressionSlope #> 1                                  1.249280 #> 2                                  1.357084 #> 3                                  1.383570 #>   RB.AvgAOEBl_InverseLinearRegressionSlope #> 1                                 1.233930 #> 2                                 1.396308 #> 3                                 1.333983 #>   RB.AvgAOESen_InverseLinearRegressionSlope #> 1                                  1.221486 #> 2                                  1.379351 #> 3                                  1.309603 #>   RB.AvgAOEDoc_InflectionPointPolynomial RB.AvgAOEBl_InflectionPointPolynomial #> 1                               5.546945                              5.408585 #> 2                               6.250595                              6.473423 #> 3                               6.243204                              6.079442 #>   RB.AvgAOESen_InflectionPointPolynomial RB.AvgAOEDoc_InverseAverage #> 1                               5.378199                   0.4697780 #> 2                               6.448596                   0.5345470 #> 3                               5.907647                   0.5288327 #>   RB.AvgAOEBl_InverseAverage RB.AvgAOESen_InverseAverage #> 1                  0.4590395                   0.4550586 #> 2                  0.5567262                   0.5520732 #> 3                  0.5172046                   0.4992655 #>   RB.AvgAOEDoc_IndexAboveThreshold.0.3. RB.AvgAOEBl_IndexAboveThreshold.0.3. #> 1                              1.239130                             1.108658 #> 2                              1.710145                             2.013095 #> 3                              1.555556                             1.499346 #>   RB.AvgAOESen_IndexAboveThreshold.0.3. RB.AvgNmdEntBl RB.AvgNounNmdEntBl #> 1                              1.016300      0.3636364          0.3636364 #> 2                              1.739749      0.2307692          0.2307692 #> 3                              1.490188      0.4117647          0.2352941 #>   RB.AvgUnqNmdEntBl RB.AvgNmdEntSen RB.TCorefChainDoc RB.AvgCorefChain #> 1         0.3636364       0.3076923                 2         2.500000 #> 2         0.2307692       0.1666667                 5         2.000000 #> 3         0.4117647       0.3181818                 6         2.166667 #>   RB.AvgChainSpan RB.AvgInferenceDistChain RB.TActCorefChainWd #> 1            25.0                    21.50          0.01481481 #> 2            20.4                     3.40          0.02976190 #> 3            20.0                    12.75          0.03174603 #>   RB.TCorefChainBigSpan RB.AvgConnBl_addition RB.AvgConnSen_addition #> 1                     2             0.1818182              0.1538462 #> 2                     3             0.6153846              0.4444444 #> 3                     3             0.7058824              0.5454545 #>   RB.AvgConnBl_complex_subordinators RB.AvgConnSen_complex_subordinators #> 1                                  0                                   0 #> 2                                  0                                   0 #> 3                                  0                                   0 #>   RB.AvgConnBl_concessions RB.AvgConnSen_concessions RB.AvgConnBl_conditions #> 1                        0                         0              0.00000000 #> 2                        0                         0              0.07692308 #> 3                        0                         0              0.00000000 #>   RB.AvgConnSen_conditions RB.AvgConnBl_conjunctions RB.AvgConnSen_conjunctions #> 1               0.00000000                 0.1818182                  0.1538462 #> 2               0.05555556                 0.5384615                  0.3888889 #> 3               0.00000000                 0.7647059                  0.5909091 #>   RB.AvgConnBl_conjuncts RB.AvgConnSen_conjuncts RB.AvgConnBl_contrasts #> 1             0.09090909              0.07692308             0.09090909 #> 2             0.07692308              0.05555556             0.46153846 #> 3             0.00000000              0.00000000             0.17647059 #>   RB.AvgConnSen_contrasts RB.AvgConnBl_coordinating_conjuncts #> 1              0.07692308                          0.09090909 #> 2              0.33333333                          0.15384615 #> 3              0.13636364                          0.17647059 #>   RB.AvgConnSen_coordinating_conjuncts RB.AvgConnBl_coordinating_connectives #> 1                           0.07692308                             0.4545455 #> 2                           0.11111111                             1.1538462 #> 3                           0.13636364                             1.0000000 #>   RB.AvgConnSen_coordinating_connectives RB.AvgConnBl_disjunctions #> 1                              0.3846154                 0.0000000 #> 2                              0.8333333                 0.3076923 #> 3                              0.7727273                 0.0000000 #>   RB.AvgConnSen_disjunctions RB.AvgConnBl_logical_connectors #> 1                  0.0000000                       0.1818182 #> 2                  0.2222222                       0.8461538 #> 3                  0.0000000                       0.7058824 #>   RB.AvgConnSen_logical_connectors RB.AvgConnBl_oppositions #> 1                        0.1538462               0.09090909 #> 2                        0.6111111               0.15384615 #> 3                        0.5454545               0.17647059 #>   RB.AvgConnSen_oppositions RB.AvgConnBl_order RB.AvgConnSen_order #> 1                0.07692308         0.00000000          0.00000000 #> 2                0.11111111         0.07692308          0.05555556 #> 3                0.13636364         0.05882353          0.04545455 #>   RB.AvgConnBl_quasi_coordinators RB.AvgConnSen_quasi_coordinators #> 1                      0.00000000                       0.00000000 #> 2                      0.07692308                       0.05555556 #> 3                      0.00000000                       0.00000000 #>   RB.AvgConnBl_reason_and_purpose RB.AvgConnSen_reason_and_purpose #> 1                       0.3636364                        0.3076923 #> 2                       0.2307692                        0.1666667 #> 3                       0.3529412                        0.2727273 #>   RB.AvgConnBl_reference RB.AvgConnSen_reference RB.AvgConnBl_semi_coordinators #> 1                      0                       0                     0.00000000 #> 2                      0                       0                     0.07692308 #> 3                      0                       0                     0.17647059 #>   RB.AvgConnSen_semi_coordinators RB.AvgConnBl_sentence_linking #> 1                      0.00000000                      1.090909 #> 2                      0.05555556                      1.307692 #> 3                      0.13636364                      1.411765 #>   RB.AvgConnSen_sentence_linking RB.AvgConnBl_simple_subordinators #> 1                      0.9230769                         0.5454545 #> 2                      0.9444444                         0.3076923 #> 3                      1.0909091                         0.2941176 #>   RB.AvgConnSen_simple_subordinators RB.AvgConnBl_temporal_connectors #> 1                          0.4615385                        0.1818182 #> 2                          0.2222222                        0.1538462 #> 3                          0.2272727                        0.0000000 #>   RB.AvgConnSen_temporal_connectors RB.LexChainAvgSpan RB.LexChainMaxSp #> 1                         0.1538462           1.642857                7 #> 2                         0.1111111           1.446809                7 #> 3                         0.0000000           1.557692                9 #>   RB.AvgLexChain RB.PercLexChainCoverage RB.AvgBlScore RB.AvgSenScore #> 1     0.09090909              0.02173913      1.545407       1.390028 #> 2     0.07692308              0.01470588      1.724044       1.333472 #> 3     0.05882353              0.01234568      1.718639       1.402121 #>   RB.BlScoreStDev RB.SenScoreStDev RB.AvgBlAdjCoh_LeackockChodorow #> 1       0.8274138        0.7325734                       0.3456678 #> 2       1.0229678        1.0678718                       0.3997900 #> 3       1.2547859        1.1039884                       0.4760863 #>   RB.AvgBlDocCoh_LeackockChodorow RB.AvgInterBlCoh_LeackockChodorow #> 1                       0.7136200                         0.4461038 #> 2                       0.7296906                         0.4835340 #> 3                       0.7409131                         0.5873670 #>   RB.AvgIntraBlCoh_LeackockChodorow RB.AvgMidEndCoh_LeackockChodorow #> 1                         0.4616434                        0.3023522 #> 2                         0.5045232                        0.4220118 #> 3                         0.3854458                        0.5137440 #>   RB.AvgSenAdjCoh_LeackockChodorow RB.AvgSenBlCoh_LeackockChodorow #> 1                        0.2308217                       0.9647468 #> 2                        0.2018093                       0.9208567 #> 3                        0.3854458                       0.9426745 #>   RB.AvgStartMidCoh_LeackockChodorow RB.AvgTransCoh_LeackockChodorow #> 1                          0.4165398                       0.3016517 #> 2                          0.3812699                       0.3089626 #> 3                          0.5056226                       0.3314135 #>   RB.AvgStartEndCoh_LeackockChodorow RB.DocFlAbsPosAcc_LeackockChodorow_MaxVal #> 1                          0.9895363                                 0.6363636 #> 2                          0.5703230                                 0.3076923 #> 3                          0.7551799                                 0.5294118 #>   RB.DocFlAbsDistAcc_LeackockChodorow_MaxVal #> 1                                  0.7272727 #> 2                                  1.5384615 #> 3                                  0.8235294 #>   RB.DocFlAdjAcc_LeackockChodorow_MaxVal RB.DocFlAvgCoh_LeackockChodorow_MaxVal #> 1                               3.333333                              0.5627130 #> 2                               2.250000                              0.6200820 #> 3                               4.266667                              0.6555148 #>   RB.DocFlMaxOrdSeq_LeackockChodorow_MaxVal #> 1                                 0.8181818 #> 2                                 0.6923077 #> 3                                 0.8823529 #>   RB.DocFlSpearmamCorr_LeackockChodorow_MaxVal #> 1                                    0.9272727 #> 2                                    0.8461538 #> 3                                    0.9534314 #>   RB.DocFlAbsPosAcc_LeackockChodorow_AbvMeanStdev #> 1                                       0.1818182 #> 2                                       0.1538462 #> 3                                       0.6470588 #>   RB.DocFlAbsDistAcc_LeackockChodorow_AbvMeanStdev #> 1                                        2.1818182 #> 2                                        2.7692308 #> 3                                        0.9411765 #>   RB.DocFlAdjAcc_LeackockChodorow_AbvMeanStdev #> 1                                     4.333333 #> 2                                     3.000000 #> 3                                     6.300000 #>   RB.DocFlAvgCoh_LeackockChodorow_AbvMeanStdev #> 1                                    0.7123994 #> 2                                    0.6862546 #> 3                                    0.7442700 #>   RB.DocFlMaxOrdSeq_LeackockChodorow_AbvMeanStdev #> 1                                       0.6363636 #> 2                                       0.6923077 #> 3                                       0.8235294 #>   RB.DocFlSpearmamCorr_LeackockChodorow_AbvMeanStdev RB.AvgBlAdjCoh_WuPalmer #> 1                                          0.6636364               0.3323541 #> 2                                          0.5879121               0.3941398 #> 3                                          0.9240196               0.4104730 #>   RB.AvgBlDocCoh_WuPalmer RB.AvgInterBlCoh_WuPalmer RB.AvgIntraBlCoh_WuPalmer #> 1               0.7018975                 0.4265859                 0.3477444 #> 2               0.7229328                 0.4797541                 0.4266026 #> 3               0.7178448                 0.5253572                 0.4428663 #>   RB.AvgMidEndCoh_WuPalmer RB.AvgSenAdjCoh_WuPalmer RB.AvgSenBlCoh_WuPalmer #> 1                0.2480075                0.1738722               0.9622921 #> 2                0.3839423                0.1706410               0.9183316 #> 3                0.4505651                0.4428663               0.9451320 #>   RB.AvgStartMidCoh_WuPalmer RB.AvgTransCoh_WuPalmer RB.AvgStartEndCoh_WuPalmer #> 1                  0.3480577               0.2955147                  0.9659091 #> 2                  0.3577486               0.2966081                  0.4459707 #> 3                  0.4364716               0.2980134                  0.6366632 #>   RB.DocFlAbsPosAcc_WuPalmer_MaxVal RB.DocFlAbsDistAcc_WuPalmer_MaxVal #> 1                         0.4545455                          1.2727273 #> 2                         0.4615385                          0.9230769 #> 3                         0.7058824                          0.4705882 #>   RB.DocFlAdjAcc_WuPalmer_MaxVal RB.DocFlAvgCoh_WuPalmer_MaxVal #> 1                       2.222222                      0.5204703 #> 2                       2.083333                      0.5548682 #> 3                       4.400000                      0.5734712 #>   RB.DocFlMaxOrdSeq_WuPalmer_MaxVal RB.DocFlSpearmamCorr_WuPalmer_MaxVal #> 1                         0.7272727                            0.8363636 #> 2                         0.8461538                            0.9175824 #> 3                         0.9411765                            0.9754902 #>   RB.DocFlAbsPosAcc_WuPalmer_AbvMeanStdev #> 1                               0.1818182 #> 2                               0.1538462 #> 3                               0.2941176 #>   RB.DocFlAbsDistAcc_WuPalmer_AbvMeanStdev RB.DocFlAdjAcc_WuPalmer_AbvMeanStdev #> 1                                 2.727273                             2.600000 #> 2                                 2.000000                             3.000000 #> 3                                 1.882353                             6.388889 #>   RB.DocFlAvgCoh_WuPalmer_AbvMeanStdev RB.DocFlMaxOrdSeq_WuPalmer_AbvMeanStdev #> 1                            0.6824084                               0.7272727 #> 2                            0.6333813                               0.6923077 #> 3                            0.6560723                               0.7058824 #>   RB.DocFlSpearmamCorr_WuPalmer_AbvMeanStdev RB.AvgBlAdjCoh_Path #> 1                                  0.4363636           0.1540942 #> 2                                  0.7527473           0.1549885 #> 3                                  0.8651961           0.1357365 #>   RB.AvgBlDocCoh_Path RB.AvgInterBlCoh_Path RB.AvgIntraBlCoh_Path #> 1           0.6128262             0.2490548            0.08035714 #> 2           0.6157296             0.2614884            0.11750000 #> 3           0.6060339             0.2549578            0.29416667 #>   RB.AvgMidEndCoh_Path RB.AvgSenAdjCoh_Path RB.AvgSenBlCoh_Path #> 1           0.09330454           0.04017857           0.9563492 #> 2           0.12692848           0.04700000           0.9078449 #> 3           0.12782490           0.29416667           0.9358032 #>   RB.AvgStartMidCoh_Path RB.AvgTransCoh_Path RB.AvgStartEndCoh_Path #> 1              0.1114012           0.1477113              0.9062500 #> 2              0.1243247           0.1019360              0.1282407 #> 3              0.1725397           0.1020735              0.1836065 #>   RB.DocFlAbsPosAcc_Path_MaxVal RB.DocFlAbsDistAcc_Path_MaxVal #> 1                     0.4545455                      1.2727273 #> 2                     0.5384615                      0.9230769 #> 3                     0.4705882                      0.9411765 #>   RB.DocFlAdjAcc_Path_MaxVal RB.DocFlAvgCoh_Path_MaxVal #> 1                   2.222222                  0.3102984 #> 2                   1.416667                  0.2836245 #> 3                   3.600000                  0.2859291 #>   RB.DocFlMaxOrdSeq_Path_MaxVal RB.DocFlSpearmamCorr_Path_MaxVal #> 1                     0.7272727                        0.8363636 #> 2                     0.8461538                        0.9175824 #> 3                     0.8823529                        0.9411765 #>   RB.DocFlAbsPosAcc_Path_AbvMeanStdev RB.DocFlAbsDistAcc_Path_AbvMeanStdev #> 1                           0.2727273                             2.545455 #> 2                           0.3076923                             2.153846 #> 3                           0.4117647                             1.647059 #>   RB.DocFlAdjAcc_Path_AbvMeanStdev RB.DocFlAvgCoh_Path_AbvMeanStdev #> 1                         3.250000                        0.5402825 #> 2                         3.615385                        0.3950062 #> 3                         6.315789                        0.3656144 #>   RB.DocFlMaxOrdSeq_Path_AbvMeanStdev RB.DocFlSpearmamCorr_Path_AbvMeanStdev #> 1                           0.7272727                              0.5181818 #> 2                           0.6153846                              0.6758242 #> 3                           0.7647059                              0.8431373 #>   RB.AvgBlAdjCoh_LSA RB.AvgBlDocCoh_LSA RB.AvgInterBlCoh_LSA #> 1          0.2162169          0.4711404            0.3106523 #> 2          0.1233398          0.4489107            0.3133580 #> 3          0.1472582          0.4401688            0.2785260 #>   RB.AvgIntraBlCoh_LSA RB.AvgMidEndCoh_LSA RB.AvgSenAdjCoh_LSA #> 1           0.20945084           0.1020611          0.20945084 #> 2           0.04617532           0.1621686          0.03694025 #> 3           0.32675691           0.1178623          0.26140553 #>   RB.AvgSenBlCoh_LSA RB.AvgStartMidCoh_LSA RB.AvgTransCoh_LSA #> 1          0.9587929            0.14471317          0.2219136 #> 2          0.8676843            0.09533193          0.1215832 #> 3          0.9250621            0.21628388          0.1179168 #>   RB.AvgStartEndCoh_LSA RB.DocFlAbsPosAcc_LSA_MaxVal #> 1             0.7327036                    0.4545455 #> 2             0.1005207                    0.6923077 #> 3             0.2079999                    1.0000000 #>   RB.DocFlAbsDistAcc_LSA_MaxVal RB.DocFlAdjAcc_LSA_MaxVal #> 1                     1.4545455                  1.444444 #> 2                     0.4615385                  3.333333 #> 3                     0.0000000                  4.600000 #>   RB.DocFlAvgCoh_LSA_MaxVal RB.DocFlMaxOrdSeq_LSA_MaxVal #> 1                 0.3794198                    0.6363636 #> 2                 0.3462775                    0.9230769 #> 3                 0.3238202                    1.0000000 #>   RB.DocFlSpearmamCorr_LSA_MaxVal RB.DocFlAbsPosAcc_LSA_AbvMeanStdev #> 1                       0.7818182                          0.1818182 #> 2                       0.9670330                          0.3076923 #> 3                       1.0000000                          0.1176471 #>   RB.DocFlAbsDistAcc_LSA_AbvMeanStdev RB.DocFlAdjAcc_LSA_AbvMeanStdev #> 1                            1.636364                           3.200 #> 2                            2.153846                           3.875 #> 3                            2.235294                           6.375 #>   RB.DocFlAvgCoh_LSA_AbvMeanStdev RB.DocFlMaxOrdSeq_LSA_AbvMeanStdev #> 1                       0.5602619                          0.6363636 #> 2                       0.6377347                          0.6153846 #> 3                       0.4058362                          0.7058824 #>   RB.DocFlSpearmamCorr_LSA_AbvMeanStdev RB.AvgBlAdjCoh_LDA RB.AvgBlDocCoh_LDA #> 1                             0.7909091          0.4697303          0.6283452 #> 2                             0.6978022          0.3126697          0.5808281 #> 3                             0.7818627          0.3808731          0.6231704 #>   RB.AvgInterBlCoh_LDA RB.AvgIntraBlCoh_LDA RB.AvgMidEndCoh_LDA #> 1            0.5578005            0.4578321           0.2036443 #> 2            0.5184759            0.2126834           0.3410723 #> 3            0.5479840            0.5511218           0.2357932 #>   RB.AvgSenAdjCoh_LDA RB.AvgSenBlCoh_LDA RB.AvgStartMidCoh_LDA #> 1           0.4578321          0.9686679             0.3266129 #> 2           0.2126834          0.8855748             0.2843673 #> 3           0.5511218          0.9516984             0.4852931 #>   RB.AvgTransCoh_LDA RB.AvgStartEndCoh_LDA RB.DocFlAbsPosAcc_LDA_MaxVal #> 1          0.4690524             0.8367524                    0.3636364 #> 2          0.2595891             0.2886530                    0.6153846 #> 3          0.2987547             0.3439918                    0.4705882 #>   RB.DocFlAbsDistAcc_LDA_MaxVal RB.DocFlAdjAcc_LDA_MaxVal #> 1                     1.4545455                  1.600000 #> 2                     0.6153846                  3.083333 #> 3                     0.8235294                  3.933333 #>   RB.DocFlAvgCoh_LDA_MaxVal RB.DocFlMaxOrdSeq_LDA_MaxVal #> 1                 0.5947884                    0.7272727 #> 2                 0.5489599                    0.8461538 #> 3                 0.5805084                    0.8823529 #>   RB.DocFlSpearmamCorr_LDA_MaxVal RB.DocFlAbsPosAcc_LDA_AbvMeanStdev #> 1                       0.8000000                         0.18181818 #> 2                       0.9560440                         0.23076923 #> 3                       0.9558824                         0.05882353 #>   RB.DocFlAbsDistAcc_LDA_AbvMeanStdev RB.DocFlAdjAcc_LDA_AbvMeanStdev #> 1                            2.181818                        2.583333 #> 2                            2.000000                        3.266667 #> 3                            3.058824                        6.294118 #>   RB.DocFlAvgCoh_LDA_AbvMeanStdev RB.DocFlMaxOrdSeq_LDA_AbvMeanStdev #> 1                       0.7071962                          0.6363636 #> 2                       0.7097034                          0.6923077 #> 3                       0.7304283                          0.6470588 #>   RB.DocFlSpearmamCorr_LDA_AbvMeanStdev RB.AvgBlAdjCoh_word2vec #> 1                             0.6636364               0.2243804 #> 2                             0.7252747               0.2138584 #> 3                             0.6568627               0.2069513 #>   RB.AvgBlDocCoh_word2vec RB.AvgInterBlCoh_word2vec RB.AvgIntraBlCoh_word2vec #> 1               0.4480521                 0.3093268                 0.2011581 #> 2               0.4704585                 0.3640401                 0.2764313 #> 3               0.4406463                 0.3125775                 0.2289906 #>   RB.AvgMidEndCoh_word2vec RB.AvgSenAdjCoh_word2vec RB.AvgSenBlCoh_word2vec #> 1               0.06161313                0.2011581               0.9589169 #> 2               0.24614102                0.1658588               0.8918040 #> 3               0.21614282                0.2289906               0.9207015 #>   RB.AvgStartMidCoh_word2vec RB.AvgTransCoh_word2vec RB.AvgStartEndCoh_word2vec #> 1                 0.07332757               0.2231703                  0.7912171 #> 2                 0.09096676               0.2282478                  0.2386241 #> 3                 0.12890010               0.1529742                  0.1983993 #>   RB.DocFlAbsPosAcc_word2vec_MaxVal RB.DocFlAbsDistAcc_word2vec_MaxVal #> 1                         0.3636364                          1.0909091 #> 2                         0.3846154                          0.9230769 #> 3                         0.6470588                          0.9411765 #>   RB.DocFlAdjAcc_word2vec_MaxVal RB.DocFlAvgCoh_word2vec_MaxVal #> 1                       2.111111                      0.3971140 #> 2                       2.818182                      0.4947970 #> 3                       3.400000                      0.3836729 #>   RB.DocFlMaxOrdSeq_word2vec_MaxVal RB.DocFlSpearmamCorr_word2vec_MaxVal #> 1                         0.7272727                            0.8818182 #> 2                         0.7692308                            0.9285714 #> 3                         0.8823529                            0.9411765 #>   RB.DocFlAbsPosAcc_word2vec_AbvMeanStdev #> 1                               0.3636364 #> 2                               0.4615385 #> 3                               0.5882353 #>   RB.DocFlAbsDistAcc_word2vec_AbvMeanStdev RB.DocFlAdjAcc_word2vec_AbvMeanStdev #> 1                                1.4545455                             2.800000 #> 2                                0.9230769                             3.363636 #> 3                                0.7058824                             4.562500 #>   RB.DocFlAvgCoh_word2vec_AbvMeanStdev RB.DocFlMaxOrdSeq_word2vec_AbvMeanStdev #> 1                            0.5274460                               0.8181818 #> 2                            0.5600191                               0.9230769 #> 3                            0.4670990                               0.7647059 #>   RB.DocFlSpearmamCorr_word2vec_AbvMeanStdev RB.AvgBlVoiceCoOcc #> 1                                  0.7818182          0.5454545 #> 2                                  0.8846154          0.4615385 #> 3                                  0.9705882          0.3529412 #>   RB.AvgSenVoiceCoOcc RB.BlVoiceCoOccStDev RB.SenVoiceCoOccStDev #> 1           0.4615385            0.5222330             0.5188745 #> 2           0.3333333            0.5188745             0.4850713 #> 3           0.3181818            0.4925922             0.4767313 #>   RB.AvgBlVoiceCumEff RB.AvgSenVoiceCumEff RB.BlVoiceCumEffStDev #> 1           0.4307845            0.5148575             0.2682717 #> 2           0.4213276            0.3718415             0.2421134 #> 3           0.3786613            0.3681187             0.2988490 #>   RB.SenVoiceCumEffStDev RB.AvgBlVoiceMI RB.AvgSenVoiceMI RB.BlVoiceMIStDev #> 1              0.6069549              -1               -1                -1 #> 2              0.5624504              -1               -1                -1 #> 3              0.5945355              -1               -1                -1 #>   RB.SenVoiceMIStDev RB.AvgVoice RB.AvgVoiceBlDist RB.AvgVoiceBlEnt #> 1                 -1  0.09090909         0.6084679         1.767874 #> 2                 -1  0.07692308         0.5148575         1.767874 #> 3                 -1  0.05882353         0.4583388         1.738986 #>   RB.AvgVoiceReccBl RB.AvgVoiceReccSen RB.AvgVoiceSenDist RB.AvgVoiceSenEnt #> 1         0.7142857           1.000000          0.5148575          1.767874 #> 2         1.0000000           1.714286          0.3718415          1.767874 #> 3         1.5714286           1.875000          0.3681187          1.899604 #>   RB.VoiceBlDistStDev RB.VoiceReccBlDistStDev RB.VoiceReccSenStDev #> 1           0.5873037               1.0301575             1.414214 #> 2           0.5831434               0.7559289             1.030158 #> 3           0.6729940               1.9166297             2.471715 #>   RB.VoiceSenDistStDev RB.VoiceAvgSpan RB.VoiceMaxSpan RB.AvgSenSyll #> 1            0.5831434               7               7      13.61538 #> 2            0.5466035               7               7      12.00000 #> 3            0.5808662               9               9      11.13636 #>   RB.AvgSenStressedSyll RB.AvgRhythmUnits RB.AvgRhythmUnitSyll #> 1              3.769231          1.769231             7.695652 #> 2              3.555556          1.888889             6.617647 #> 3              3.727273          2.181818             5.354167 #>   RB.AvgRhythmUnitStreesSyll RB.LangRhythmCoeff RB.LangRhythmId RB.FrqRhythmId #> 1                   2.130435          0.5797101               5     0.07692308 #> 2                   2.117647          0.5384615              10     0.05555556 #> 3                   1.875000          0.4098361               4     0.04545455 #>   RB.LangRhythmDiameter RB.SenAllit RB.SenAsson RB.AvgDepsBl_acl #> 1                     9           0           0        0.3636364 #> 2                     6           0           0        0.0000000 #> 3                     6           0           1        0.1764706 #>   RB.AvgDepsSen_acl RB.AvgDepsBl_advcl RB.AvgDepsSen_advcl RB.AvgDepsBl_advmod #> 1         0.3076923          0.1818182           0.1538462           0.6363636 #> 2         0.0000000          0.1538462           0.1111111           0.7692308 #> 3         0.1363636          0.1764706           0.1363636           0.7058824 #>   RB.AvgDepsSen_advmod RB.AvgDepsBl_amod RB.AvgDepsSen_amod RB.AvgDepsBl_appos #> 1            0.5384615         0.4545455          0.3846154         0.09090909 #> 2            0.5555556         0.6153846          0.4444444         0.00000000 #> 3            0.5454545         0.7058824          0.5454545         0.05882353 #>   RB.AvgDepsSen_appos RB.AvgDepsBl_aux RB.AvgDepsSen_aux RB.AvgDepsBl_auxpass #> 1          0.07692308        0.1818182         0.1538462            0.1818182 #> 2          0.00000000        0.6153846         0.4444444            0.1538462 #> 3          0.04545455        0.4117647         0.3181818            0.1176471 #>   RB.AvgDepsSen_auxpass RB.AvgDepsBl_case RB.AvgDepsSen_case RB.AvgDepsBl_cc #> 1            0.15384615          1.454545          1.2307692       0.1818182 #> 2            0.11111111          1.461538          1.0555556       0.7692308 #> 3            0.09090909          1.117647          0.8636364       0.7058824 #>   RB.AvgDepsSen_cc RB.AvgDepsBl_ccomp RB.AvgDepsSen_ccomp RB.AvgDepsBl_compound #> 1        0.1538462         0.09090909          0.07692308            0.09090909 #> 2        0.5555556         0.46153846          0.33333333            0.15384615 #> 3        0.5454545         0.11764706          0.09090909            0.11764706 #>   RB.AvgDepsSen_compound RB.AvgDepsBl_conj RB.AvgDepsSen_conj RB.AvgDepsBl_cop #> 1             0.07692308         0.1818182          0.1538462        0.4545455 #> 2             0.11111111         0.6923077          0.5000000        0.1538462 #> 3             0.09090909         0.5882353          0.4545455        0.0000000 #>   RB.AvgDepsSen_cop RB.AvgDepsBl_csubj RB.AvgDepsSen_csubj #> 1         0.3846154                  0                   0 #> 2         0.1111111                  0                   0 #> 3         0.0000000                  0                   0 #>   RB.AvgDepsBl_csubjpass RB.AvgDepsSen_csubjpass RB.AvgDepsBl_dep #> 1                      0                       0        0.4545455 #> 2                      0                       0        0.5384615 #> 3                      0                       0        0.3529412 #>   RB.AvgDepsSen_dep RB.AvgDepsBl_det RB.AvgDepsSen_det RB.AvgDepsBl_discourse #> 1         0.3846154        1.1818182         1.0000000                      0 #> 2         0.3888889        1.1538462         0.8333333                      0 #> 3         0.2727273        0.8235294         0.6363636                      0 #>   RB.AvgDepsSen_discourse RB.AvgDepsBl_dislocated RB.AvgDepsSen_dislocated #> 1                       0                       0                        0 #> 2                       0                       0                        0 #> 3                       0                       0                        0 #>   RB.AvgDepsBl_dobj RB.AvgDepsSen_dobj RB.AvgDepsBl_expl RB.AvgDepsSen_expl #> 1         0.6363636          0.5384615        0.09090909         0.07692308 #> 2         0.7692308          0.5555556        0.00000000         0.00000000 #> 3         0.8823529          0.6818182        0.05882353         0.04545455 #>   RB.AvgDepsBl_foreign RB.AvgDepsSen_foreign RB.AvgDepsBl_goeswith #> 1                    0                     0                     0 #> 2                    0                     0                     0 #> 3                    0                     0                     0 #>   RB.AvgDepsSen_goeswith RB.AvgDepsBl_iobj RB.AvgDepsSen_iobj RB.AvgDepsBl_list #> 1                      0                 0                  0                 0 #> 2                      0                 0                  0                 0 #> 3                      0                 0                  0                 0 #>   RB.AvgDepsSen_list RB.AvgDepsBl_mark RB.AvgDepsSen_mark RB.AvgDepsBl_mwe #> 1                  0         0.6363636          0.5384615       0.09090909 #> 2                  0         0.4615385          0.3333333       0.00000000 #> 3                  0         0.3529412          0.2727273       0.05882353 #>   RB.AvgDepsSen_mwe RB.AvgDepsBl_name RB.AvgDepsSen_name RB.AvgDepsBl_neg #> 1        0.07692308                 0                  0       0.18181818 #> 2        0.00000000                 0                  0       0.07692308 #> 3        0.04545455                 0                  0       0.11764706 #>   RB.AvgDepsSen_neg RB.AvgDepsBl_nmod RB.AvgDepsSen_nmod RB.AvgDepsBl_nsubj #> 1        0.15384615         1.2727273          1.0769231          0.8181818 #> 2        0.05555556         1.0000000          0.7222222          1.3076923 #> 3        0.09090909         0.8823529          0.6818182          0.7058824 #>   RB.AvgDepsSen_nsubj RB.AvgDepsBl_nsubjpass RB.AvgDepsSen_nsubjpass #> 1           0.6923077             0.09090909              0.07692308 #> 2           0.9444444             0.15384615              0.11111111 #> 3           0.5454545             0.23529412              0.18181818 #>   RB.AvgDepsBl_nummod RB.AvgDepsSen_nummod RB.AvgDepsBl_parataxis #> 1           0.0000000           0.00000000             0.00000000 #> 2           0.0000000           0.00000000             0.07692308 #> 3           0.1176471           0.09090909             0.00000000 #>   RB.AvgDepsSen_parataxis RB.AvgDepsBl_punct RB.AvgDepsSen_punct #> 1              0.00000000           1.454545            1.230769 #> 2              0.05555556           1.384615            1.000000 #> 3              0.00000000           1.705882            1.318182 #>   RB.AvgDepsBl_remnant RB.AvgDepsSen_remnant RB.AvgDepsBl_reparandum #> 1                    0                     0                       0 #> 2                    0                     0                       0 #> 3                    0                     0                       0 #>   RB.AvgDepsSen_reparandum RB.AvgDepsBl_root RB.AvgDepsSen_root #> 1                        0        0.09090909         0.07692308 #> 2                        0        0.00000000         0.00000000 #> 3                        0        0.23529412         0.18181818 #>   RB.AvgDepsBl_vocative RB.AvgDepsSen_vocative RB.AvgDepsBl_xcomp #> 1                     0                      0          0.3636364 #> 2                     0                      0          0.1538462 #> 3                     0                      0          0.1176471 #>   RB.AvgDepsSen_xcomp #> 1          0.30769231 #> 2          0.11111111 #> 3          0.09090909"},{"path":"https://shmercer.github.io/writeAlizer/reference/model_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Report optional model dependencies (no installation performed) — model_deps","title":"Report optional model dependencies (no installation performed) — model_deps","text":"Discovers package dependencies model fitting package `Suggests` field. function **never installs** packages. reports packages required currently missing, prints ready--copy command can run install missing ones manually.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/model_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report optional model dependencies (no installation performed) — model_deps","text":"","code":"model_deps()"},{"path":"https://shmercer.github.io/writeAlizer/reference/model_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report optional model dependencies (no installation performed) — model_deps","text":"named list: required Character vector discovered package tokens (may include version qualifiers),     e.g. c(\"glmnet (>= 4.1)\", \"ranger\"). union package     Suggests field optional writeAlizer.required_pkgs override. missing Character vector base package names installed,     e.g. c(\"glmnet\", \"ranger\"). function also emits message. nothing missing, reports required packages installed. Otherwise, lists missing packages prints copy-paste install.packages() command.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/model_deps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report optional model dependencies (no installation performed) — model_deps","text":"can add override discovered packages testing CI `options(writeAlizer.required_pkgs = c(\"pkgA\", \"pkgB (>= 1.2.3)\"))`. version qualifiers include preserved `required` output, stripped availability check `missing`.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/model_deps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report optional model dependencies (no installation performed) — model_deps","text":"","code":"md <- model_deps() #> ✔ All required packages are installed: caretEnsemble, Cubist, curl, earth, gbm, glmnet, kernlab, knitr, pls, randomForest, rmarkdown, testthat, withr md$missing #> character(0)  #> ✖ Missing required packages: #> • thispkgdoesnotexist123 #> • another.fake #> install.packages(c(\"thispkgdoesnotexist123\", \"another.fake\"))"},{"path":"https://shmercer.github.io/writeAlizer/reference/predict_quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict writing quality — predict_quality","title":"Predict writing quality — predict_quality","text":"Run specified model(s) preprocessed data return predictions. Apply scoring models ReaderBench, Coh-Metrix, /GAMET files. Holistic writing quality can generated ReaderBench (model = 'rb_mod3all') Coh-Metrix files (model = 'coh_mod3all'). Also, Correct Word Sequences Correct Minus Incorrect Word Sequences can generated GAMET file (model = 'gamet_cws1').","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/predict_quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict writing quality — predict_quality","text":"","code":"predict_quality(model, data)"},{"path":"https://shmercer.github.io/writeAlizer/reference/predict_quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict writing quality — predict_quality","text":"model string telling scoring model use. Options : 'rb_mod1', 'rb_mod2', 'rb_mod3narr', 'rb_mod3exp', 'rb_mod3per', 'rb_mod3all', ReaderBench files generate holistic quality, 'coh_mod1', 'coh_mod2', 'coh_mod3narr', 'coh_mod3exp', 'coh_mod3per', 'coh_mod3all' Coh-Metrix files generate holistic quality, 'gamet_cws1' generate Correct Word Sequences (CWS) Correct Minus Incorrect Word Sequences (CIWS) scores GAMET file. data Data frame returned import_gamet, import_coh, import_rb.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/predict_quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict writing quality — predict_quality","text":"data.frame ID one column per sub-model prediction.         multiple sub-models used predictions numeric,         aggregate column named pred_<model>_mean added         (except \"gamet_cws1\").","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/predict_quality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict writing quality — predict_quality","text":"**Offline/examples:** Examples use built-'example' model seeded temporary directory via writeAlizer::wa_seed_example_models(\"example\"), downloads attempted checks stay fast. temporary files created example cleaned end \\examples{}.","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/predict_quality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict writing quality — predict_quality","text":"","code":"# Fast, offline example: seed a tiny 'example' model and predict (no downloads) # Force offline mode for CRAN and automated checks old_offline <- getOption(\"writeAlizer.offline\") options(writeAlizer.offline = TRUE) on.exit(options(writeAlizer.offline = old_offline), add = TRUE)  coh_path <- system.file(\"extdata\", \"sample_coh.csv\", package = \"writeAlizer\") coh <- import_coh(coh_path)  mock_old <- getOption(\"writeAlizer.mock_dir\") ex_dir <- writeAlizer::wa_seed_example_models(\"example\", dir = tempdir()) on.exit(options(writeAlizer.mock_dir = mock_old), add = TRUE)  out <- predict_quality(\"example\", coh) #> Error in .wa_load_fits_list(canonical_model): No model artifacts registered for 'example' head(out) #> Error: object 'out' not found  # IMPORTANT: reset mock_dir before running full demos, so real artifacts load options(writeAlizer.mock_dir = mock_old)   # More complete demos (skipped on CRAN to keep checks fast) # \\donttest{ # If offline mode is set (e.g., by the example guard for CRAN), skip networked demos. if (!isTRUE(getOption(\"writeAlizer.offline\", FALSE))) {   ### Example 1: ReaderBench output file   file_path1 <- system.file(\"extdata\", \"sample_rb.csv\", package = \"writeAlizer\")   rb_file <- import_rb(file_path1)   rb_quality <- predict_quality(\"rb_mod3all\", rb_file)   head(rb_quality)    ### Example 2: Coh-Metrix output file   file_path2 <- system.file(\"extdata\", \"sample_coh.csv\", package = \"writeAlizer\")   coh_file <- import_coh(file_path2)   coh_quality <- predict_quality(\"coh_mod3all\", coh_file)   head(coh_quality)    ### Example 3: GAMET output file (CWS and CIWS)   file_path3 <- system.file(\"extdata\", \"sample_gamet.csv\", package = \"writeAlizer\")   gam_file <- import_gamet(file_path3)   gamet_CWS_CIWS <- predict_quality(\"gamet_cws1\", gam_file)   head(gamet_CWS_CIWS) } else {   # Skipped because writeAlizer.offline = TRUE (e.g., on CRAN) } #> ℹ Downloaded model artifact: #> * File: rb_exp_vars_v2.rds #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: rb_narr_vars_v2.rds #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: rb_per_vars_v2.rds #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> Warning: These variables have zero variances: RB.SenAllit, RB.AvgDepsBl_csubj, RB.AvgDepsBl_iobj #> Warning: These variables have zero variances: RB.AvgConnBl_complex_subordinators, RB.SenAllit, RB.AvgDepsBl_csubj, RB.AvgDepsBl_iobj, RB.AvgDepsSen_iobj #> Warning: These variables have zero variances: RB.AvgConnBl_complex_subordinators, RB.SenAllit, RB.AvgDepsBl_csubj, RB.AvgDepsSen_csubj, RB.AvgDepsBl_iobj #> ℹ Downloaded model artifact: #> * File: rb_mod3exp_v2.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: rb_mod3narr_v2.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: rb_mod3per_v2.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: coh_exp_vars.rds #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: coh_narr_vars.rds #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: coh_per_vars.rds #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> Warning: These variables have zero variances: WRDPRP1p #> Warning: These variables have zero variances: WRDPRP1p #> Warning: These variables have zero variances: WRDPRP1p #> ℹ Downloaded model artifact: #> * File: coh_mod3exp.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: coh_mod3narr.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: coh_mod3per.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: CWS_mod1a.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #> ℹ Downloaded model artifact: #> * File: CIWS_mod1a.rda #> * Cache: /home/runner/.cache/R/writeAlizer #>   (Artifacts are downloaded only the first time you use a model.) #>   Tip: clear the cache with wa_cache_clear() if needed. #>       ID pred_CWS_mod1a pred_CIWS_mod1a #> 1 txt\\\\7       125.8289        107.8254 #> 2 txt\\\\8       157.8647        141.8125 #> 3 txt\\\\9       168.2293        149.5521 # }"},{"path":"https://shmercer.github.io/writeAlizer/reference/preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-process data — preprocess","title":"Pre-process data — preprocess","text":"Pre-process Coh-Metrix ReaderBench data files applying predictive models. Uses artifact registry load correct variable lists applies centering scaling per sub-model, preserving original behavior model key.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-process data — preprocess","text":"","code":"preprocess(model, data)"},{"path":"https://shmercer.github.io/writeAlizer/reference/preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-process data — preprocess","text":"model Character scalar. scoring model use. Supported values include: ReaderBench: 'rb_mod1','rb_mod2','rb_mod3narr','rb_mod3exp','rb_mod3per','rb_mod3all', 'rb_mod3narr_v2','rb_mod3exp_v2','rb_mod3per_v2','rb_mod3all_v2'; Coh-Metrix: 'coh_mod1','coh_mod2','coh_mod3narr','coh_mod3exp','coh_mod3per','coh_mod3all'; GAMET: 'gamet_cws1'. Legacy keys RB mod3 (non-v2) mapped v2 equivalents internally. data data.frame produced import_rb, import_coh, import_gamet, ID column expected feature columns.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-process data — preprocess","text":"list pre-processed data frames, one per sub-model. models   varlists (e.g., 'rb_mod1','coh_mod1'), returns six copies input data.   'gamet_cws1', returns two copies (CWS/CIWS). 1-part/3-part models, returns   list length 1/3 centered & scaled features plus ID column.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/preprocess.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-process data — preprocess","text":"**Offline/examples:** Examples use built-'example' model seeded temporary directory via writeAlizer::wa_seed_example_models(\"example\"), downloads attempted checks stay fast.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-process data — preprocess","text":"","code":"# Minimal, offline example using the built-in 'example' model (no downloads) rb_path <- system.file(\"extdata\", \"sample_rb.csv\", package = \"writeAlizer\") rb <- import_rb(rb_path)  pp <- preprocess(\"example\", rb) length(pp); lapply(pp, nrow) #> [1] 1 #> [[1]] #> [1] 3 #>"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear writeAlizer's user cache — wa_cache_clear","title":"Clear writeAlizer's user cache — wa_cache_clear","text":"Deletes files wa_cache_dir(). ask = TRUE interactive session, short preview (item count, total size, 10 sample paths) printed asking confirmation.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear writeAlizer's user cache — wa_cache_clear","text":"","code":"wa_cache_clear(ask = interactive(), preview = TRUE)"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_clear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear writeAlizer's user cache — wa_cache_clear","text":"ask Logical; TRUE interactive, ask confirmation. preview Logical; TRUE ask TRUE, show brief listing/size summary asking.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_clear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear writeAlizer's user cache — wa_cache_clear","text":"Invisibly returns TRUE cache cleared (already absent),   FALSE user declined deletion failed.","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_clear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear writeAlizer's user cache — wa_cache_clear","text":"","code":"# Safe demo: redirect cache to tempdir(), create a file, then clear it #> Cleared cache: /tmp/RtmpSPKk2r/wa_cache_demo2"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to writeAlizer's user cache — wa_cache_dir","title":"Path to writeAlizer's user cache — wa_cache_dir","text":"Returns directory used store cached model artifacts. default platform-appropriate user cache path tools::R_user_dir(\"writeAlizer\",\"cache\"). option writeAlizer.cache_dir set non-empty string, location used instead. makes easy redirect cache tests examples (e.g., tempdir()).","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to writeAlizer's user cache — wa_cache_dir","text":"","code":"wa_cache_dir()"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to writeAlizer's user cache — wa_cache_dir","text":"Character scalar path.","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path to writeAlizer's user cache — wa_cache_dir","text":"","code":"# Inspect the cache directory (no side effects) wa_cache_dir() #> [1] \"/home/runner/.cache/R/writeAlizer\"  #> Cleared cache: /tmp/RtmpSPKk2r/wa_cache_demo"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and cache an artifact (graceful offline behavior) — wa_download","title":"Download and cache an artifact (graceful offline behavior) — wa_download","text":"Public helper fetch artifact user cache. function delegates internal downloader used package runtime, benefits behavior:","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and cache an artifact (graceful offline behavior) — wa_download","text":"","code":"wa_download(file, url, sha256 = NULL, quiet = TRUE)  download(file, url) # deprecated"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and cache an artifact (graceful offline behavior) — wa_download","text":"file Character scalar; filename use cache (e.g., `\"rb_mod1a.rda\"`). url Character scalar; source URL. May `file://` URL local testing. sha256 Optional 64-hex SHA-256 checksum verification. provided, cached file must match (re-download attempted). quiet Logical; `TRUE`, suppresses download progress messages.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and cache an artifact (graceful offline behavior) — wa_download","text":"character scalar: absolute path cached file.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and cache an artifact (graceful offline behavior) — wa_download","text":"- Respects options(writeAlizer.mock_dir) load local mock copies   (useful tests/examples offline runs). - Fails gracefully clear, informative message Internet   resources unavailable changed (per CRAN policy). - Verifies optional SHA-256 checksum re-downloads errors   match.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and cache an artifact (graceful offline behavior) — wa_download","text":"","code":"# Offline-friendly example using a local source (no network): src <- tempfile(fileext = \".bin\") writeBin(as.raw(1:10), src) dest <- wa_download(   \"example.bin\",   url = paste0(\"file:///\", normalizePath(src, winslash = \"/\")) ) file.exists(dest) #> [1] TRUE  # Using a mock directory to avoid network access: # options(writeAlizer.mock_dir = \"/path/to/local/artifacts\") # dest <- wa_download(\"rb_mod1a.rda\", url = \"https://example.com/rb_mod1a.rda\")"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_seed_example_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Seed example model files in a temporary directory — wa_seed_example_models","title":"Seed example model files in a temporary directory — wa_seed_example_models","text":"helper writes minimal model file subdirectory `dir` (default: `tempdir()`), sets option `writeAlizer.mock_dir` location examples can run without downloads network access.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_seed_example_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seed example model files in a temporary directory — wa_seed_example_models","text":"","code":"wa_seed_example_models(model = c(\"example\"), dir = tempdir())"},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_seed_example_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seed example model files in a temporary directory — wa_seed_example_models","text":"model Character scalar. `\"example\"` currently supported. dir Directory create example model (default: `tempdir()`).","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_seed_example_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seed example model files in a temporary directory — wa_seed_example_models","text":"(Invisibly) path created example model directory.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_seed_example_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Seed example model files in a temporary directory — wa_seed_example_models","text":"Creates ultra-tiny model artifact used examples points package loader via temporary option. - Writes `tempdir()` returns created path. - Sets `options(writeAlizer.mock_dir = <path>)`; callers   restore prior options appropriate (see Examples).","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/wa_seed_example_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Seed example model files in a temporary directory — wa_seed_example_models","text":"","code":"old <- getOption(\"writeAlizer.mock_dir\") on.exit(options(writeAlizer.mock_dir = old), add = TRUE)  ex <- wa_seed_example_models(dir = tempdir()) # Use the package normally here; the loader will find `ex` # ... unlink(ex, recursive = TRUE, force = TRUE)"},{"path":"https://shmercer.github.io/writeAlizer/reference/writeAlizer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","title":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","text":"Package-level documentation writeAlizer.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/writeAlizer-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","text":"Detailed documentation writeAlizer available GitHub README file wiki. writeAlizer R package () imports ReaderBench, Coh-Metrix, GAMET output files R, (b) uses research-developed scoring models generate predicted writing quality scores Correct Word Sequences Correct Minus Incorrect Word Sequences scores files. writeAlizer package includes functions two types tasks: (1) importing ReaderBench, Coh-Metrix, /GAMET output files R; (2) generating predicted quality scores using imported output files. also additional functions help (3) installation package dependencies (4) cache management.","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/writeAlizer-package.html","id":"-import-output-files","dir":"Reference","previous_headings":"","what":"1. Import output files","title":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","text":"import_rb import_coh import_gamet import_merge_gamet_rb","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/writeAlizer-package.html","id":"-generate-predicted-quality-scores","dir":"Reference","previous_headings":"","what":"2. Generate predicted quality scores","title":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","text":"predict_quality","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/writeAlizer-package.html","id":"-identify-necessary-packages","dir":"Reference","previous_headings":"","what":"3. Identify necessary packages","title":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","text":"model_deps","code":""},{"path":"https://shmercer.github.io/writeAlizer/reference/writeAlizer-package.html","id":"-cache-management","dir":"Reference","previous_headings":"","what":"4. Cache management","title":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","text":"wa_cache_dir wa_cache_clear","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/reference/writeAlizer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"writeAlizer: An R Package to Generate Automated Writing Quality and Curriculum-Based Measurement (CBM) Scores. — writeAlizer-package","text":"Maintainer: Sterett H. Mercer sterett.mercer@ubc.ca (ORCID)","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-171-2025-10-22","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.7.1 (2025-10-22)","title":"writeAlizer 1.7.1 (2025-10-22)","text":"CRAN release: 2025-10-23","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"cran-compliance-and-offline-example-guard-1-7-1","dir":"Changelog","previous_headings":"","what":"CRAN compliance and offline example guard","title":"writeAlizer 1.7.1 (2025-10-22)","text":"Fixed predict_quality() example run deterministically options(writeAlizer.offline = TRUE). Example now seeds local 'example' model wa_seed_example_models(\"example\", dir = tempdir()) restores prior options cleanup. Offline runs now fully skip remote file downloads, avoiding spurious errors R CMD check ---cran --run-donttest. user-facing API changes.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-170-2025-10-21","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.7.0 (2025-10-21)","title":"writeAlizer 1.7.0 (2025-10-21)","text":"CRAN release: 2025-10-22","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"error-handling--classes-1-7-0","dir":"Changelog","previous_headings":"","what":"Error handling & classes","title":"writeAlizer 1.7.0 (2025-10-21)","text":"writeAlizer_registry_missing – missing/invalid artifacts.csv. writeAlizer_unknown_model – unknown/unsupported model key (raised preprocess() / predict_quality()). writeAlizer_download_failed – offline/bad URL/checksum fetch failures. writeAlizer_internal_mismatch – expected submodel count ≠ preprocessing splits. .wa_ensure_file - added classed errors download retries","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"loaders--caching-1-7-0","dir":"Changelog","previous_headings":"","what":"Loaders & caching","title":"writeAlizer 1.7.0 (2025-10-21)","text":"Honors options(writeAlizer.mock_dir=) (preserves subdirs). Supports file:// URLs; clearer offline guidance. Warns cached checksum mismatch; hard-errors post-download checksum mismatches. .wa_parts_for() validates inputs uses canonicalized model keys. Prefer mock_dir artifacts; load via temp env; pick sensible object (fit, model, etc.). Legacy → v2 name mapping; special-case example. .wa_require_pkgs_for_fits() collects deps model classes train$modelInfo$library; errors install hint. .wa_validate_import() - checks ID column duplicates character type","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"model_deps-1-7-0","dir":"Changelog","previous_headings":"","what":"model_deps()","title":"writeAlizer 1.7.0 (2025-10-21)","text":"Reports required vs missing Suggests + override options(writeAlizer.required_pkgs=). Preserves version qualifiers required; strips qualifiers missing. Emits copy-paste install.packages() command. Tests updated capture output/messages cleanly (stray console prints).","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"predict-api--preprocessing-1-7-0","dir":"Changelog","previous_headings":"","what":"Predict API & preprocessing","title":"writeAlizer 1.7.0 (2025-10-21)","text":"Better validation swapped args NA/invalid model actionable messages. predict_quality() surfaces unknown model keys (includes canonicalized key). Preprocessing preserves row counts/ID; supports v2 varlists consolidated-split behavior.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"test-infrastructure-1-7-0","dir":"Changelog","previous_headings":"","what":"Test infrastructure","title":"writeAlizer 1.7.0 (2025-10-21)","text":"Added wa_sample_path() reliably find inst/extdata dev/install contexts. Network helper hardened; integration tests force offline via options(writeAlizer.offline=TRUE) avoid HEAD probes. Introduced .quiet_eval() silence messages/warnings targeted assertions.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"integration--smoke-tests-1-7-0","dir":"Changelog","previous_headings":"","what":"Integration & smoke tests","title":"writeAlizer 1.7.0 (2025-10-21)","text":"RB: rb_mod1, rb_mod2, rb_mod3narr_v2, rb_mod3exp_v2, rb_mod3per_v2, rb_mod3all_v2 Coh: coh_mod1, coh_mod2, coh_mod3narr, coh_mod3exp, coh_mod3per, coh_mod3all GAMET: gamet_cws1 Writes matching varlists/fits mock_dir; verifies prediction columns mean-column rules. rb_mod3all smoke test made offline-mocked varlists.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"rbcoh-import-utilities-tests-1-7-0","dir":"Changelog","previous_headings":"","what":"RB/COH import utilities tests","title":"writeAlizer 1.7.0 (2025-10-21)","text":"import_rb() path SEP=, + read.table(text=readLines()). NaN→NA character columns; guarded numeric-like conversion (accepts integer appropriate). Name-based keep/drop assertions driven sample header. Skips assets truly missing (via wa_sample_path()).","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"misc-1-7-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"writeAlizer 1.7.0 (2025-10-21)","text":"Added package vignette switch MIT license Mismatched expected submodels. Bad registry columns. Checksum errors. Legacy → v2 artifact-name mapping.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-165-2025-09-30","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.6.5 (2025-09-30)","title":"writeAlizer 1.6.5 (2025-09-30)","text":"CRAN release: 2025-09-30 Hardened internal downloader respect offline environments provide informative messages instead low-level download.file errors. Tests require remote artifacts now skip concrete URLs/paths unavailable, example assets use seeded mock directory deterministic, network-free runs. user-facing API changes.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-164-2025-09-23","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.6.4 (2025-09-23)","title":"writeAlizer 1.6.4 (2025-09-23)","text":"CRAN release: 2025-09-30","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"cran-policy--documentation-improvements-1-6-4","dir":"Changelog","previous_headings":"","what":"CRAN policy & documentation improvements","title":"writeAlizer 1.6.4 (2025-09-23)","text":"Replaced writeAlizer:::wa_seed_example_models() writeAlizer::wa_seed_example_models() examples documentation, per CRAN’s guidance avoid accessing unexported objects. Exported wa_seed_example_models() full documentation: Added @return (returns created temp path invisibly). Added small, runnable example writes tempdir() cleans ; also restores prior option value. Documented temporary side effect setting options(writeAlizer.mock_dir = <path>).","code":""},{"path":[]},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"cran-policy--documentation-improvements-1-6-3","dir":"Changelog","previous_headings":"","what":"CRAN policy & documentation improvements","title":"writeAlizer 1.6.3 (2025-09-17)","text":"DESCRIPTION: acronyms expanded (e.g., CBM), software/package names single-quoted, method references added CRAN auto-link format (DOIs). Documentation: @return added import_coh(), import_rb(), import_gamet(), import_merge_gamet_rb(). Examples: \\\\dontrun{} replaced \\\\donttest{} needed; fast examples unwrapped; predict_quality() uses tiny offline 'example' model seeded tempdir() cleanup. File /O: writes home default; examples/tests use tempdir(); caching standardized via tools::R_user_dir(\"writeAlizer\",\"cache\"). New helpers: wa_cache_dir() wa_cache_clear(ask=) cache discovery/cleanup. Optional deps: new model_deps() reports (install) optional packages prints install hint; install_model_deps() deprecated. Tests: self-cleaning withr fixtures; temp detritus; removed deprecated global teardown.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"bug-fixes--maintenance-1-6-3","dir":"Changelog","previous_headings":"","what":"Bug fixes & maintenance","title":"writeAlizer 1.6.3 (2025-09-17)","text":"Stabilized example/test behavior offline mocking artifacts via writeAlizer.mock_dir. Suppressed noisy pre-processing variance warnings integration tests.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-162-2025-09-14","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.6.2 (2025-09-14)","title":"writeAlizer 1.6.2 (2025-09-14)","text":"Removed unused model argument. Standardized options(writeAlizer.require_pkgs_for_fits = function() ...) hook; dropped internal helper. Single Suggests discovery path via utils::packageDescription(..., fields = \"Suggests\"). dry_run = TRUE now returns tokens visibly (character vector); version qualifiers stripped checks/installs. Tests updated","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-161-2025-09-12","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.6.1 (2025-09-12)","title":"writeAlizer 1.6.1 (2025-09-12)","text":"Test coverage raised ~82% overall. artifact_registry: prefer CSV (inst/metadata/artifacts.csv) remove legacy -code fallback table; tighter input validation. Quieter tests silencing download/file messages using local cache paths tests. Clear dry-run behavior (returns Suggests tokens helper-provided list). Strips version qualifiers installation; installs truly missing packages. New helper hook via options(writeAlizer.require_pkgs_for_fits = function(model, install, return_pkgs) {...}). Documentation: examples added install_model_deps(); tidied roxygen. Stabilized artifact fetching tests (.wa_ensure_file) explicit cache dirs checksum paths. Eliminated intermittent warnings download.file() file URLs tests. Added/expanded tests registry filtering, checksum guards, loader utilities, package-requirement collection. Removed unused/legacy code paths exercised fallback artifact table.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-160-2025-09-12","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.6.0 (2025-09-12)","title":"writeAlizer 1.6.0 (2025-09-12)","text":"Replaced ReaderBench mod3 models v2 counterparts (e.g., rb_mod3all now calls rb_mod3all_v2 models). Optimized model artifact downloads added SHA-256 checksum verification (auto re-download mismatch). predict_quality() now returns per-submodel scores overall mean column pred_<model>_mean (applicable). import_rb() now keeps ReaderBench features name using packaged sample_rb.csv header (first 404), dropping 405+. falls back legacy positional selection header unavailable, reducing brittleness column reordering. Added install_model_deps() helper install Suggests given model. CI: wired GitHub Actions R-CMD-check (Windows/macOS/Linux).","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-150-2024-02-09","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.5.0 (2024-02-09)","title":"writeAlizer 1.5.0 (2024-02-09)","text":"Added new genre-specific scoring models ReaderBench (rb_mod3narr_v2, rb_mod3exp_v2, rb_mod3per_v2, rb_mod3all_v2) Coh-Metrix (coh_mod3narr, coh_mod3exp, coh_mod3per, coh_mod3all).","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-140-2024-01-30","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.4.0 (2024-01-30)","title":"writeAlizer 1.4.0 (2024-01-30)","text":"Added new ReaderBench genre-specific scoring models (rb_mod3narr, rb_mod3exp, rb_mod3per, rb_mod3all).","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-130-2021-11-10","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.3.0 (2021-11-10)","title":"writeAlizer 1.3.0 (2021-11-10)","text":"Replaced RB/Coh model 2s trimmed versions model 1s improved data pre-processing.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-120-2020-11-11","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.2.0 (2020-11-11)","title":"writeAlizer 1.2.0 (2020-11-11)","text":"Moved model artifacts OSF hosting. Added RB/Coh model 2s (trimmed versions model 1 ensembles).","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-110-2020-08-03","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.1.0 (2020-08-03)","title":"writeAlizer 1.1.0 (2020-08-03)","text":"Model artifacts now download first predict_quality() call.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-104-2020-07-29","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.0.4 (2020-07-29)","title":"writeAlizer 1.0.4 (2020-07-29)","text":"Fixed ReaderBench file import.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-103-2020-05-29","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.0.3 (2020-05-29)","title":"writeAlizer 1.0.3 (2020-05-29)","text":"Now accepts ReaderBench output files .csv.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-102-2020-05-27","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.0.2 (2020-05-27)","title":"writeAlizer 1.0.2 (2020-05-27)","text":"predict_quality() now also returns ID variable.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-101-2020-05-14","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.0.1 (2020-05-14)","title":"writeAlizer 1.0.1 (2020-05-14)","text":"Added model fit objects package test data.","code":""},{"path":"https://shmercer.github.io/writeAlizer/news/index.html","id":"writealizer-100-2020-05-01","dir":"Changelog","previous_headings":"","what":"writeAlizer 1.0.0 (2020-05-01)","title":"writeAlizer 1.0.0 (2020-05-01)","text":"Initial version.","code":""}]
